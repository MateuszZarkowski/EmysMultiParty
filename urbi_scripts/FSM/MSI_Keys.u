/*
 * MSI_Keys: Main graph implementation.
 *
 * Load this file in your server to run the graph.
 *
 * Created: Pn 1. cze 11:56:11 2015
 *      by: Gostai Studio 2.7
 *
 * WARNING! All changes made in this file will be lost!
 */


// Load urbiscript file.
load("urbi/fsm.u");

//#line 16 "MSI_KeysGostai Studio 2.7"

/*************************
 * Create the root state *
 *************************/

//Clean previous code
if (hasLocalSlot("_root_MSI_Keys_1"))
  if (Object.hasLocalSlot("removeLocalSlot"))
    removeLocalSlot("_root_MSI_Keys_1")
  else
    removeSlot("_root_MSI_Keys_1");

var _root_MSI_Keys_1 = fsm.State.new("_root_MSI_Keys_1");
_root_MSI_Keys_1.'$params_dict' = Dictionary.new();
var _root_MSI_Keys_1._nodes_ = Object.new;

/**********************
 * States declaration *
 **********************/

//Key_pressing state declaration
var _root_MSI_Keys_1._nodes_.Key_pressing = fsm.State.create_("_root_MSI_Keys_1._nodes_.Key_pressing", _root_MSI_Keys_1,
function() {
//#push 1 "Key_pressing"
//*  Author: Pawel Kaczmarek
//*  Date: 01.06.2015
//*  Ver:  1.0 (from MSI)

keyMoveParams.newParams = 1;
robot.body.neck.head.BehaveNormal(2);
//#pop
}
, true
, 3
, function() {
//#push 1 "Key_pressing.enter"
//Code executed before entering the node



if (!hasSlot("tran")) 		var Global.tran ="" 	  else Global.tran ="";
if (!hasSlot("state")) 	var Global.state =""  else Global.state ="";
if (!hasSlot("startTimer")) 	var Global.startTimer =0  else Global.startTimer =0;
if (!hasSlot("timer")) 	var Global.timer = 0  else Global.timer =0;
if (!hasSlot("waiting")) var Global.waiting = 0 else Global.waiting = 0;
if (!hasSlot("additionalTime")) var Global.additionalTime = 8 else Global.additionalTime = 8;

if (!hasSlot("randomBehaviours")) var Global.randomBehaviours = 0 else Global.randomBehaviours = 0;

if (!hasSlot("sleepState")) var Global.sleepState = 0 else Global.sleepState = 0;

if (!hasSlot("keyMoveParams")) {
	var Global.keyMoveParams = Object.new();

var keyMoveParams.newParams=0;

var keyMoveParams.p1LookingIntens=7;
var keyMoveParams.p2LookingInterval=3;
var keyMoveParams.p3StopTime=1;
var keyMoveParams.p4DiskIntens=6;
var keyMoveParams.p5DiskTime=3;
var keyMoveParams.p6BlinkInterval=40;
var keyMoveParams.p7BlinkTime=0.8;
} else {
keyMoveParams.newParams=0;

keyMoveParams.p1LookingIntens=7;
keyMoveParams.p2LookingInterval=3;
keyMoveParams.p3StopTime=1;
keyMoveParams.p4DiskIntens=6;
keyMoveParams.p5DiskTime=3;
keyMoveParams.p6BlinkInterval=40;
keyMoveParams.p7BlinkTime=0.8;
};
//intenstywnosc rozgladania
//czas rozgladania
//czas co jaki staje 
//intensywnosc ruchu duskow
//czas co jaki rusza 
//max czas miedzy mrugnieciami
//czas mrugniecia


if (!hasSlot("_alive_")) var Global._alive_=Tag.new() else { Global._alive_.unfreeze | Global._alive_.stop;};
if (!hasSlot("_aliveMove_")) var Global._aliveMove_=Tag.new() else { Global._aliveMove_.unfreeze | Global._aliveMove_.stop;};
if (!hasSlot("_showEmots_")) var Global._showEmots_=Tag.new() else { Global._showEmots_.unfreeze | Global._showEmots_.stop;};
if (!hasSlot("_timer_")) var Global._timer_=Tag.new() else { Global._timer_.unfreeze | Global._showEmots_.stop;};
if (!hasSlot("_randomBehaviours_")) var Global._randomBehaviours_=Tag.new() else { Global._randomBehaviours_.unfreeze | Global._randomBehaviours_.stop;};
if (!hasSlot("_sleeping_")) var Global._sleeping_=Tag.new() else { Global._sleeping_.unfreeze | Global._sleeping_.stop;};



if (!hasSlot("KeySetParams"))
{
do (Global)
{
function KeySetParams(p1,p2,p3,p4,p5,p6,p7)
{
keyMoveParams.p1LookingIntens=p1;
keyMoveParams.p2LookingInterval=p2;
keyMoveParams.p3StopTime=p3;
keyMoveParams.p4DiskIntens=p4;
keyMoveParams.p5DiskTime=p5;
keyMoveParams.p6BlinkInterval=p6;
keyMoveParams.p7BlinkTime=p7;
};
};
};
//#pop
}
, function() {
//#push 1 "Key_pressing.leave"
//Code executed after leaving the node

//#pop
}, false, [347.989, 317.102]);

//Start state declaration
var _root_MSI_Keys_1._nodes_.Start = fsm.State.create_("_root_MSI_Keys_1._nodes_.Start", _root_MSI_Keys_1._nodes_.Key_pressing,
function() {
//#push 1 "Start"
robot.body.stop;
robot.competency.BehaveNormal();
//#pop
}
, true
, 4
, function() {
//#push 1 "Start.enter"
//Code executed before entering the node

//#pop
}
, function() {
//#push 1 "Start.leave"
//Code executed after leaving the node

//#pop
}, false, [-276.399, -11.0885]);

//Main state declaration
var _root_MSI_Keys_1._nodes_.Main = fsm.State.create_("_root_MSI_Keys_1._nodes_.Main", _root_MSI_Keys_1._nodes_.Key_pressing,
function() {
//#push 1 "Main"
at (keyMoveParams.newParams == 1)
{
echo("alive");
keyMoveParams.newParams = 0;
Global._alive_:robot.body.neck.head.ActAlive(keyMoveParams.p1LookingIntens,keyMoveParams.p2LookingInterval,keyMoveParams.p3StopTime,keyMoveParams.p4DiskIntens,keyMoveParams.p5DiskTime,keyMoveParams.p6BlinkInterval,keyMoveParams.p7BlinkTime),
Global.startTimer = 1;
},


at (Global.startTimer == 1)
{
//each time robot waits longer
Global.additionalTime +=8;
//no more than 120s
if (Global.additionalTime>120)
Global.additionalTime = 120;

Global.startTimer =0;
Global._timer_.stop;
Global.timer = 0;
Global._timer_:Global.timer = 100 time: (Global.additionalTime+15.random),
},


Global._randomBehaviours_: at (Global.timer == 100)
{
Global._alive_.stop;
Global.state = "randomBehaviour";
robot.competency.BehaveRandomly(keySpeaking);
//reset parameters to their defaults
KeySetParams(5,5,1,6,3,50,0.8);
Global.state = "wait";
Global.randomBehaviours+=1;
if (Global.randomBehaviours<4)
keyMoveParams.newParams = 1;
},

at (Global.randomBehaviours == 4)
{
Global.sleepState = 1;
echo("sleeping");
Global._alive_.stop;
Global._sleeping_: robot.competency.ActGoSleep(),
},
//#pop
}
, false
, 5
, function() {
//#push 1 "Main.enter"
//Code executed before entering the node
Global.state = "wait";
//#pop
}
, function() {
//#push 1 "Main.leave"
//Code executed after leaving the node

//#pop
}, false, [72.2927, -0.214384]);

//Wait state declaration
var _root_MSI_Keys_1._nodes_.Wait = fsm.State.create_("_root_MSI_Keys_1._nodes_.Wait", _root_MSI_Keys_1._nodes_.Main,
function() {
//#push 1 "Wait"
while(Global.tran!="next")
{
if((Keyboard.unreadPress == 1) && (Keyboard.lastKey !="?"))
{
Global.tran="next";
};
sleep(20ms);
};
//#pop
}
, true
, 6
, function() {
//#push 1 "Wait.enter"
//Code executed before entering the node
Global.tran = "";
Global.state = "wait";
//#pop
}
, function() {
//#push 1 "Wait.leave"
//Code executed after leaving the node

//#pop
}, false, [-139.794, 82.314]);

//Execute_emotions state declaration
var _root_MSI_Keys_1._nodes_.Execute_emotions = fsm.State.create_("_root_MSI_Keys_1._nodes_.Execute_emotions", _root_MSI_Keys_1._nodes_.Main,
function() {
//#push 1 "Execute_emotions"
Global._timer_.stop;

while(Global.state != "wait")
{
Global.waiting = 1;
sleep(100ms)
};
Global.state = "execution";

if(Global.waiting)
{
Global.waiting =0;
sleep(1s);
};

Global.additionalTime = 8;

if(Global.sleepState == 1)
{
Global.sleepState = 0;
robot.body.neck.head.BehaveNormal(1.5s);
};

switch (Keyboard.lastKey)
{
case Global.keyHappy:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveHappy(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
	KeySetParams(8,2,0,-10,2,30,0.5);
	keyMoveParams.newParams = 1;
	Global.randomBehaviours = 0;
	
};
	
case Global.keySad:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveSad(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
	KeySetParams(3,5,2,4,4,50,1);
  keyMoveParams.newParams = 1;
  Global.randomBehaviours = 0;
	};	

case Global.keyFear:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveFear(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
	KeySetParams(6,3,0,10,3,40,0.7);
  keyMoveParams.newParams = 1;
	Global.randomBehaviours = 0;
	};
	
case Global.keyDisgust:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveDisgust(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
	
	KeySetParams(4,5,2,4,5,40,0.7);
  keyMoveParams.newParams = 1;
	Global.randomBehaviours = 0;
	};
	
case Global.keySurprise:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveSurprise(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
	
	KeySetParams(7,2,0,-7,2,30,0.5);
  keyMoveParams.newParams = 1;
	Global.randomBehaviours = 0;
};

case Global.keyAngry:
	{
	Global._alive_.stop;
	Global._showEmots_.stop;
	Global._sleeping_.stop;
	Global._showEmots_:robot.competency.BehaveAngry(keySpeaking);
	sleep(100ms);
	Global._showEmots_.stop;
		
	KeySetParams(8,1.5,1,7,3,40,0.5);
  keyMoveParams.newParams = 1;
	Global.randomBehaviours = 0;
};	
	
default:
	{
	;
	};	
	
};
Keyboard.modKey = "";
Keyboard.lastKey = "";
Keyboard.unreadPress = 0;

//#pop
}
, false
, 7
, function() {
//#push 1 "Execute_emotions.enter"
//Code executed before entering the node
Global.tran="";

//#pop
}
, function() {
//#push 1 "Execute_emotions.leave"
//Code executed after leaving the node

//#pop
}, false, [129.374, -61.6]);

/***************************
 * Transitions declaration *
 ***************************/
fsm.Transition.create_(_root_MSI_Keys_1._nodes_.Main, _root_MSI_Keys_1._nodes_.Wait, _root_MSI_Keys_1._nodes_.Execute_emotions, "(Global.tran==\"next\")", "_root_MSI_Keys_1._nodes_.Transition_2");
fsm.Transition.create_(_root_MSI_Keys_1._nodes_.Main, _root_MSI_Keys_1._nodes_.Execute_emotions, _root_MSI_Keys_1._nodes_.Wait, "done?", "_root_MSI_Keys_1._nodes_.Transition_3");
fsm.Transition.create_(_root_MSI_Keys_1._nodes_.Key_pressing, _root_MSI_Keys_1._nodes_.Start, _root_MSI_Keys_1._nodes_.Main, "done?", "_root_MSI_Keys_1._nodes_.Transition");


var _root_MSI_Keys_1.enterChan = Channel.new("enteringNode");
var _root_MSI_Keys_1.enterChan.lobby = getSlot("lobby");
at(_root_MSI_Keys_1.enteringNode?(var id)) _root_MSI_Keys_1.enterChan << ["_root_MSI_Keys_1", id.name];
var _root_MSI_Keys_1.leaveChan = Channel.new("leavingNode");
var _root_MSI_Keys_1.leaveChan.lobby = getSlot("lobby");
at(_root_MSI_Keys_1.leavingNode?(var id)) _root_MSI_Keys_1.leaveChan << ["_root_MSI_Keys_1", id.name];
var _root_MSI_Keys_1.transitingChan = Channel.new("transiting");
var _root_MSI_Keys_1.transitingChan.lobby = getSlot("lobby");
at(_root_MSI_Keys_1.transiting?(var node, var trans)) _root_MSI_Keys_1.transitingChan << ["_root_MSI_Keys_1", trans.name];
var _root_MSI_Keys_1.freezeChan = Channel.new("frozen");
var _root_MSI_Keys_1.freezeChan.lobby = getSlot("lobby");
at(_root_MSI_Keys_1.graphFrozen?()) _root_MSI_Keys_1.freezeChan << "_root_MSI_Keys_1";
// Start code.
detach(_root_MSI_Keys_1.enter_());

// End of graph implementation `_root_MSI_Keys_1'.
