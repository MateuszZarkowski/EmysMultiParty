[         Sched         ] Initializing main coroutine
[    Sched.Coroutine    ] Initialize main coroutine: 0027FC6C.
[     Urbi.Version      ] Executable: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Executable
[         Urbi          ] create primitive apply with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Primitive::*)(class libport::intrusive_ptr<class urbi::object::List>))
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::String::*)(class libport::intrusive_ptr<class urbi::object::Object> const &)const)
[         Urbi          ] create primitive <= with C++ routine (type: bool (__thiscall urbi::object::String::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const)
[         Urbi          ] create primitive + with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(class libport::intrusive_ptr<class urbi::object::Object>)const)
[         Urbi          ] create primitive * with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(unsigned int)const)
[         Urbi          ] create primitive asBool with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive asFloat with C++ routine (type: double (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive distance with C++ routine (type: unsigned int (__thiscall urbi::object::String::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const)
[         Urbi          ] create primitive empty with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive format with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(class libport::intrusive_ptr<class urbi::object::FormatInfo>)const)
[         Urbi          ] create primitive fresh with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive fromAscii with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,unsigned char))
[         Urbi          ] create primitive hash with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Hash> (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isAlnum with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isAlpha with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isCntrl with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isDigit with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isGraph with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isLower with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isPrint with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isPunct with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isSpace with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isUpper with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive isXdigit with C++ routine (type: bool (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive join with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(class libport::Vector<class libport::intrusive_ptr<class urbi::object::Object>,class libport::FlooredAllocator<class libport::intrusive_ptr<class urbi::object::Object>,8>,class libport::Constructor<class libport::intrusive_ptr<class urbi::object::Object> >,class libport::FlooredExponentialCapacity<8> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const)
[         Urbi          ] create primitive replace with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const)
[         Urbi          ] create primitive set with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::String::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive size with C++ routine (type: unsigned int (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive toAscii with C++ routine (type: unsigned char (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive toLower with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(void)const)
[         Urbi          ] create primitive toUpper with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::String::*)(void)const)
[     Urbi.Version      ] Primitive: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Primitive
[     Urbi.Version      ] String: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object String
[     Urbi.Version      ] UValue: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object UValue
[         Urbi          ] create primitive extract with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UValue::*)(void))
[         Urbi          ] create primitive extractAsToplevelPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::UValue::*)(void))
[         Urbi          ] create primitive invalidate with C++ routine (type: void (__thiscall urbi::object::UValue::*)(void))
[         Urbi          ] create primitive put with C++ routine (type: void (__thiscall urbi::object::UValue::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[     Urbi.Version      ] Tag: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Tag
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Tag::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive stop with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] extend primitive stop with C++ routine (type: void (__thiscall urbi::object::Tag::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive block with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] extend primitive block with C++ routine (type: void (__thiscall urbi::object::Tag::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive blocked with C++ routine (type: bool (__thiscall urbi::object::Tag::*)(void)const)
[         Urbi          ] create primitive enter with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] create primitive freeze with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] create primitive frozen with C++ routine (type: bool (__thiscall urbi::object::Tag::*)(void)const)
[         Urbi          ] create primitive getParent with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Tag> (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] create primitive leave with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] create primitive name with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::Tag::*)(void)const)
[         Urbi          ] create primitive priority with C++ routine (type: unsigned int (__thiscall urbi::object::Tag::*)(void)const)
[         Urbi          ] create primitive scope with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Tag> (__cdecl*)(void))
[         Urbi          ] create primitive setPriority with C++ routine (type: unsigned int (__thiscall urbi::object::Tag::*)(unsigned int))
[         Urbi          ] create primitive unblock with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[         Urbi          ] create primitive unfreeze with C++ routine (type: void (__thiscall urbi::object::Tag::*)(void))
[     Urbi.Version      ] Server: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Server
[         Urbi          ] create primitive getIoService with C++ routine (type: class libport::intrusive_ptr<class urbi::object::IoService> (__thiscall urbi::object::Server::*)(void)const)
[         Urbi          ] create primitive host with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Server::*)(void)const)
[         Urbi          ] create primitive listen with C++ routine (type: void (__thiscall urbi::object::Server::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive port with C++ routine (type: unsigned short (__thiscall urbi::object::Server::*)(void)const)
[         Urbi          ] create primitive sockets with C++ routine (type: class std::vector<class libport::intrusive_ptr<class urbi::object::Socket>,class std::allocator<class libport::intrusive_ptr<class urbi::object::Socket> > > const & (__thiscall urbi::object::Server::*)(void)const)
[     Urbi.Version      ] Socket: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Socket
[         Urbi          ] create primitive connectSerial with C++ routine (type: void (__thiscall urbi::object::Socket::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,bool))
[         Urbi          ] create primitive disconnect with C++ routine (type: void (__thiscall urbi::object::Socket::*)(void))
[         Urbi          ] create primitive host with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Socket::*)(void)const)
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Socket::*)(void))
[         Urbi          ] create primitive isConnected with C++ routine (type: bool (__thiscall urbi::object::Socket::*)(void)const)
[         Urbi          ] create primitive localHost with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Socket::*)(void)const)
[         Urbi          ] create primitive localPort with C++ routine (type: unsigned short (__thiscall urbi::object::Socket::*)(void)const)
[         Urbi          ] create primitive poll with C++ routine (type: void (__thiscall urbi::object::Socket::*)(void))
[         Urbi          ] create primitive port with C++ routine (type: unsigned short (__thiscall urbi::object::Socket::*)(void)const)
[         Urbi          ] create primitive read with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Socket::*)(unsigned int))
[         Urbi          ] create primitive write with C++ routine (type: void (__thiscall urbi::object::Socket::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive syncWrite with C++ routine (type: void (__thiscall urbi::object::Socket::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive getIoService with C++ routine (type: class libport::intrusive_ptr<class urbi::object::IoService> (__thiscall urbi::object::Socket::*)(void)const)
[     Urbi.Version      ] Semaphore: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Semaphore
[         Urbi          ] create primitive new with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Semaphore> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class libport::intrusive_ptr<class urbi::object::Float>))
[         Urbi          ] create primitive criticalSection with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Semaphore::*)(class libport::intrusive_ptr<class urbi::object::Code>))
[         Urbi          ] create primitive acquire with C++ routine (type: void (__thiscall urbi::object::Semaphore::*)(void))
[         Urbi          ] create primitive release with C++ routine (type: void (__thiscall urbi::object::Semaphore::*)(void))
[     Urbi.Version      ] Code: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Code
[     Urbi.Scanner      ] LexerInput (max size = 8192)
[     Urbi.Scanner      ]   14 bytes
[     Urbi.Scanner      ] LexerInput (max size = 8192)
[     Urbi.Scanner      ]   0 bytes
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Code::*)(class libport::intrusive_ptr<class urbi::object::Object> const &)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Code::*)(void)const)
[         Urbi          ] create primitive bodyString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Code::*)(void)const)
[     Urbi.Version      ] UVar: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object UVar
[         Urbi          ] create primitive writeOwned with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive update_timed with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>,__int64))
[         Urbi          ] create primitive loopCheck with C++ routine (type: bool (__thiscall urbi::object::UVar::*)(void))
[         Urbi          ] create primitive accessor with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UVar::*)(class libport::Vector<class libport::intrusive_ptr<class urbi::object::Object>,class libport::FlooredAllocator<class libport::intrusive_ptr<class urbi::object::Object>,8>,class libport::Constructor<class libport::intrusive_ptr<class urbi::object::Object> >,class libport::FlooredExponentialCapacity<8> > const &))
[         Urbi          ] create primitive update_ with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive update_timed_ with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>,__int64))
[         Urbi          ] create primitive owned with C++ routine (type: class boost::function1<bool,class urbi::object::UVar &>)
[         Urbi          ] create primitive initialName with C++ routine (type: class boost::function1<class libport::Symbol,class urbi::object::UVar &>)
[         Urbi          ] create primitive changeConnections with C++ routine (type: class boost::function1<class libport::intrusive_ptr<class urbi::object::List>,class urbi::object::UVar &>)
[         Urbi          ] create primitive removeNotifyChange with C++ routine (type: bool (__thiscall urbi::object::UVar::*)(unsigned int))
[         Urbi          ] create primitive removeNotifyChangeOwned with C++ routine (type: bool (__thiscall urbi::object::UVar::*)(unsigned int))
[         Urbi          ] create primitive removeNotifyAccess with C++ routine (type: bool (__thiscall urbi::object::UVar::*)(unsigned int))
[         Urbi          ] create primitive notifyChange_ with C++ routine (type: unsigned int (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive notifyChangeOwned_ with C++ routine (type: unsigned int (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive notifyAccess_ with C++ routine (type: unsigned int (__thiscall urbi::object::UVar::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive rangemax with C++ routine (type: class boost::function1<double,class urbi::object::UVar &>)
[         Urbi          ] create primitive rangemin with C++ routine (type: class boost::function1<double,class urbi::object::UVar &>)
[         Urbi          ] create primitive timestamp with C++ routine (type: class boost::function1<double,class urbi::object::UVar &>)
[         Urbi          ] create primitive val with C++ routine (type: class boost::function1<class libport::intrusive_ptr<class urbi::object::Object>,class urbi::object::UVar &>)
[         Urbi          ] create primitive valsensor with C++ routine (type: class boost::function1<class libport::intrusive_ptr<class urbi::object::Object>,class urbi::object::UVar &>)
[         Urbi          ] create primitive changed with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::UVar::*)(void)const)
[     Urbi.Version      ] Position: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Position
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Position::*)(void))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Position::*)(class yy::position const &))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Position::*)(unsigned int,unsigned int))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Position::*)(class libport::intrusive_ptr<class urbi::object::Object>,unsigned int,unsigned int))
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Position::*)(class libport::intrusive_ptr<class urbi::object::Position>)const)
[         Urbi          ] create primitive < with C++ routine (type: bool (__thiscall urbi::object::Position::*)(class libport::intrusive_ptr<class urbi::object::Position>)const)
[         Urbi          ] create primitive - with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Position> (__thiscall urbi::object::Position::*)(int)const)
[         Urbi          ] create primitive + with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Position> (__thiscall urbi::object::Position::*)(int)const)
[         Urbi          ] create primitive lines with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Position> (__thiscall urbi::object::Position::*)(int))
[         Urbi          ] create primitive columns with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Position> (__thiscall urbi::object::Position::*)(int))
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Position::*)(void)const)
[         Urbi          ] create primitive file with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Position::*)(void)const)
[         Urbi          ] create primitive line with C++ routine (type: class boost::function1<unsigned int,class yy::position &>)
[         Urbi          ] create primitive column with C++ routine (type: class boost::function1<unsigned int,class yy::position &>)
[     Urbi.Version      ] Location: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Location
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Location::*)(void))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Location::*)(class yy::position const &))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Location::*)(class yy::position const &,class yy::position const &))
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Location::*)(class libport::intrusive_ptr<class urbi::object::Location>)const)
[         Urbi          ] create primitive begin with C++ routine (type: class boost::function1<class yy::position,class yy::location &>)
[         Urbi          ] create primitive end with C++ routine (type: class boost::function1<class yy::position,class yy::location &>)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Location::*)(void)const)
[         Urbi          ] create primitive isSystemLocation with C++ routine (type: bool (__thiscall urbi::object::Location::*)(void)const)
[     Urbi.Version      ] Lobby: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Lobby
[         Urbi          ] create primitive send with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] extend primitive send with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive binaryMode with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(bool,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive bytesSent with C++ routine (type: unsigned int (__thiscall urbi::object::Lobby::*)(void)const)
[         Urbi          ] create primitive bytesReceived with C++ routine (type: unsigned int (__thiscall urbi::object::Lobby::*)(void)const)
[         Urbi          ] create primitive create with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Lobby> (__thiscall urbi::object::Lobby::*)(void))
[         Urbi          ] create primitive lobby with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Lobby> (__cdecl*)(void))
[         Urbi          ] create primitive quit with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(void))
[         Urbi          ] create primitive receive with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive write with C++ routine (type: void (__thiscall urbi::object::Lobby::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive instances with C++ routine (type: class std::set<class urbi::object::Lobby *,struct std::less<class urbi::object::Lobby *>,class std::allocator<class urbi::object::Lobby *> > const & (__cdecl*)(void))
[     Urbi.Version      ] List: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object List
[         Urbi          ] create primitive sort with C++ routine (type: class libport::Vector<class libport::intrusive_ptr<class urbi::object::Object>,class libport::FlooredAllocator<class libport::intrusive_ptr<class urbi::object::Object>,8>,class libport::Constructor<class libport::intrusive_ptr<class urbi::object::Object> >,class libport::FlooredExponentialCapacity<8> > (__thiscall urbi::object::List::*)(void))
[         Urbi          ] extend primitive sort with C++ routine (type: class libport::Vector<class libport::intrusive_ptr<class urbi::object::Object>,class libport::FlooredAllocator<class libport::intrusive_ptr<class urbi::object::Object>,8>,class libport::Constructor<class libport::intrusive_ptr<class urbi::object::Object> >,class libport::FlooredExponentialCapacity<8> > (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive asBool with C++ routine (type: bool (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive back with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(void))
[         Urbi          ] create primitive clear with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(void))
[         Urbi          ] create primitive each with C++ routine (type: void (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive each& with C++ routine (type: void (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive each| with C++ routine (type: void (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive eachi with C++ routine (type: void (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive empty with C++ routine (type: bool (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive front with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(void))
[         Urbi          ] create primitive hash with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Hash> (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive [] with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Float> const &))
[         Urbi          ] create primitive []= with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Float> const &,class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive + with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::List> const &))
[         Urbi          ] create primitive += with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::List> const &))
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::List::*)(class urbi::object::List *)const)
[         Urbi          ] create primitive insert with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Float> const &,class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive insertBack with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive insertFront with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive removeBack with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(void))
[         Urbi          ] create primitive removeFront with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::List::*)(void))
[         Urbi          ] create primitive removeById with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive reverse with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive size with C++ routine (type: unsigned int (__thiscall urbi::object::List::*)(void)const)
[         Urbi          ] create primitive * with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(unsigned int)const)
[         Urbi          ] create primitive tail with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::List::*)(void)const)
[     Urbi.Version      ] Event: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Event
[         Urbi          ] create primitive hasSubscribers with C++ routine (type: bool (__thiscall urbi::object::Event::*)(void)const)
[         Urbi          ] create primitive onEvent with C++ routine (type: void (__thiscall urbi::object::Event::*)(class libport::intrusive_ptr<class urbi::object::Executable>,class libport::intrusive_ptr<class urbi::object::Executable>,class libport::intrusive_ptr<class urbi::object::Executable>,bool))
[         Urbi          ] create primitive waituntil with C++ routine (type: void (__thiscall urbi::object::Event::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[     Urbi.Version      ] EventHandler: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object EventHandler
[         Urbi          ] create primitive stop with C++ routine (type: void (__thiscall urbi::object::EventHandler::*)(void))
[         Urbi          ] create primitive source with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::EventHandler::*)(void))
[         Urbi          ] create primitive payload with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::EventHandler::*)(void))
[     Urbi.Version      ] Job: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Job
[         Urbi          ] create primitive $backtrace with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Job::*)(void))
[         Urbi          ] create primitive name with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::Job::*)(void)const)
[         Urbi          ] create primitive setSideEffectFree with C++ routine (type: void (__thiscall urbi::object::Job::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive status with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Job::*)(void))
[         Urbi          ] create primitive tags with C++ routine (type: class std::vector<class libport::intrusive_ptr<class urbi::object::Tag>,class std::allocator<class libport::intrusive_ptr<class urbi::object::Tag> > > (__thiscall urbi::object::Job::*)(void)const)
[         Urbi          ] create primitive terminate with C++ routine (type: void (__thiscall urbi::object::Job::*)(void))
[         Urbi          ] create primitive timeShift with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Float> (__thiscall urbi::object::Job::*)(void)const)
[         Urbi          ] create primitive waitForChanges with C++ routine (type: void (__thiscall urbi::object::Job::*)(void))
[         Urbi          ] create primitive waitForTermination with C++ routine (type: void (__thiscall urbi::object::Job::*)(void))
[     Urbi.Version      ] IoService: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object IoService
[         Urbi          ] create primitive pollFor with C++ routine (type: void (__thiscall urbi::object::IoService::*)(double))
[         Urbi          ] create primitive pollOneFor with C++ routine (type: void (__thiscall urbi::object::IoService::*)(double))
[         Urbi          ] create primitive poll with C++ routine (type: void (__thiscall urbi::object::IoService::*)(void))
[         Urbi          ] create primitive makeServer with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Server> (__thiscall urbi::object::IoService::*)(void))
[         Urbi          ] create primitive makeSocket with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Socket> (__thiscall urbi::object::IoService::*)(void))
[     Urbi.Version      ] Float: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Float
[         Urbi          ] create primitive + with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] extend primitive + with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive - with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] extend primitive - with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Float::*)(class libport::intrusive_ptr<class urbi::object::Object> const &)const)
[         Urbi          ] create primitive digits with C++ routine (type: unsigned int (__cdecl*)(void))
[         Urbi          ] create primitive digits10 with C++ routine (type: unsigned int (__cdecl*)(void))
[         Urbi          ] create primitive min with C++ routine (type: double (__cdecl*)(void))
[         Urbi          ] create primitive max with C++ routine (type: double (__cdecl*)(void))
[         Urbi          ] create primitive epsilon with C++ routine (type: double (__cdecl*)(void))
[         Urbi          ] create primitive minExponent with C++ routine (type: int (__cdecl*)(void))
[         Urbi          ] create primitive minExponent10 with C++ routine (type: int (__cdecl*)(void))
[         Urbi          ] create primitive maxExponent with C++ routine (type: unsigned int (__cdecl*)(void))
[         Urbi          ] create primitive maxExponent10 with C++ routine (type: unsigned int (__cdecl*)(void))
[         Urbi          ] create primitive radix with C++ routine (type: unsigned int (__cdecl*)(void))
[         Urbi          ] create primitive ^ with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(unsigned int)const)
[         Urbi          ] create primitive >> with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(unsigned int)const)
[         Urbi          ] create primitive <= with C++ routine (type: bool (__thiscall urbi::object::Float::*)(double const &)const)
[         Urbi          ] create primitive < with C++ routine (type: bool (__thiscall urbi::object::Float::*)(double const &)const)
[         Urbi          ] create primitive > with C++ routine (type: bool (__thiscall urbi::object::Float::*)(double const &)const)
[         Urbi          ] create primitive >= with C++ routine (type: bool (__thiscall urbi::object::Float::*)(double const &)const)
[         Urbi          ] create primitive != with C++ routine (type: bool (__thiscall urbi::object::Float::*)(double const &)const)
[         Urbi          ] create primitive << with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(unsigned int)const)
[         Urbi          ] create primitive % with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive / with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive * with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive ** with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive abs with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive acos with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive asin with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive atan with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive atan2 with C++ routine (type: double (__thiscall urbi::object::Float::*)(double)const)
[         Urbi          ] create primitive bitand with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(unsigned int)const)
[         Urbi          ] create primitive bitor with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(unsigned int)const)
[         Urbi          ] create primitive ceil with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive compl with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive cos with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive each with C++ routine (type: void (__thiscall urbi::object::Float::*)(class urbi::object::Executable *))
[         Urbi          ] create primitive each| with C++ routine (type: void (__thiscall urbi::object::Float::*)(class urbi::object::Executable *))
[         Urbi          ] create primitive exp with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive format with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Float::*)(class libport::intrusive_ptr<class urbi::object::FormatInfo>)const)
[         Urbi          ] create primitive floor with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive hash with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Hash> (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive inf with C++ routine (type: double (__cdecl*)(void))
[         Urbi          ] create primitive isInf with C++ routine (type: bool (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive isNan with C++ routine (type: bool (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive log with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive nan with C++ routine (type: double (__cdecl*)(void))
[         Urbi          ] create primitive random with C++ routine (type: unsigned int (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive srandom with C++ routine (type: void (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive round with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive seq with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive sign with C++ routine (type: int (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive sin with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive sqrt with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive tan with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[         Urbi          ] create primitive trunc with C++ routine (type: double (__thiscall urbi::object::Float::*)(void)const)
[     Urbi.Version      ] Duration: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Duration
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Duration::*)(void))
[         Urbi          ] extend primitive init with C++ routine (type: void (__thiscall urbi::object::Duration::*)(double const &))
[         Urbi          ] create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Duration::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Duration::*)(void)const)
[         Urbi          ] create primitive seconds with C++ routine (type: double (__thiscall urbi::object::Duration::*)(void)const)
[     Urbi.Version      ] Finalizable: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Finalizable
[         Urbi          ] create primitive __dec with C++ routine (type: void (__thiscall urbi::object::Finalizable::*)(void))
[         Urbi          ] create primitive __inc with C++ routine (type: void (__thiscall urbi::object::Finalizable::*)(void))
[         Urbi          ] create primitive __get with C++ routine (type: int (__thiscall urbi::object::Finalizable::*)(void)const)
[     Urbi.Version      ] File: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object File
[         Urbi          ] create primitive asList with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive content with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive create with C++ routine (type: class libport::intrusive_ptr<class urbi::object::File> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive basename with C++ routine (type: class libport::intrusive_ptr<class urbi::object::String> (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive lastModifiedDate with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Date> (__thiscall urbi::object::File::*)(void)const)
[         Urbi          ] create primitive rename with C++ routine (type: class libport::intrusive_ptr<class urbi::object::File> (__thiscall urbi::object::File::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive remove with C++ routine (type: void (__thiscall urbi::object::File::*)(void))
[         Urbi          ] create primitive size with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Float> (__thiscall urbi::object::File::*)(void)const)
[     Urbi.Version      ] Path: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Path
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Path::*)(class libport::intrusive_ptr<class urbi::object::Object> const &)const)
[         Urbi          ] create primitive <= with C++ routine (type: bool (__thiscall urbi::object::Path::*)(class libport::intrusive_ptr<class urbi::object::Path> const &)const)
[         Urbi          ] create primitive absolute with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive asList with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive basename with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive cd with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Path> (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive cwd with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Path> (__cdecl*)(void))
[         Urbi          ] create primitive dirname with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Path> (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive exists with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Path::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive isDir with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive isReg with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive open with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive readable with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[         Urbi          ] create primitive writable with C++ routine (type: bool (__thiscall urbi::object::Path::*)(void)const)
[     Urbi.Version      ] Directory: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Directory
[         Urbi          ] create primitive asList with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Directory::*)(void))
[         Urbi          ] create primitive asPath with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Path> (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive clear with C++ routine (type: void (__thiscall urbi::object::Directory::*)(void))
[         Urbi          ] create primitive current with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Directory> (__cdecl*)(void))
[         Urbi          ] create primitive content with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Directory::*)(void))
[         Urbi          ] create primitive create with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class libport::intrusive_ptr<class urbi::object::Path>))
[         Urbi          ] create primitive createAll with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class libport::intrusive_ptr<class urbi::object::Path>))
[         Urbi          ] create primitive basename with C++ routine (type: class libport::intrusive_ptr<class urbi::object::String> (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive empty with C++ routine (type: bool (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive exists with C++ routine (type: bool (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive lastModifiedDate with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Date> (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive parent with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Directory> (__thiscall urbi::object::Directory::*)(void)const)
[         Urbi          ] create primitive remove with C++ routine (type: void (__thiscall urbi::object::Directory::*)(void))
[         Urbi          ] create primitive removeAll_ with C++ routine (type: void (__thiscall urbi::object::Directory::*)(void))
[         Urbi          ] create primitive rename with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Directory> (__thiscall urbi::object::Directory::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[     Urbi.Version      ] Dictionary: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Dictionary
[         Urbi          ] create primitive asBool with C++ routine (type: bool (__thiscall urbi::object::Dictionary::*)(void)const)
[         Urbi          ] create primitive elementAdded with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::Dictionary::*)(void)const)
[         Urbi          ] create primitive elementChanged with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::Dictionary::*)(void)const)
[         Urbi          ] create primitive elementRemoved with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::Dictionary::*)(void)const)
[         Urbi          ] create primitive clear with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Dictionary> (__thiscall urbi::object::Dictionary::*)(void))
[         Urbi          ] create primitive empty with C++ routine (type: bool (__thiscall urbi::object::Dictionary::*)(void)const)
[         Urbi          ] create primitive erase with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Dictionary> (__thiscall urbi::object::Dictionary::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive get with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Dictionary::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive has with C++ routine (type: bool (__thiscall urbi::object::Dictionary::*)(class libport::intrusive_ptr<class urbi::object::Object>)const)
[         Urbi          ] create primitive keys with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__thiscall urbi::object::Dictionary::*)(void))
[         Urbi          ] create primitive set with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Dictionary> (__thiscall urbi::object::Dictionary::*)(class libport::intrusive_ptr<class urbi::object::Object>,class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive size with C++ routine (type: unsigned int (__thiscall urbi::object::Dictionary::*)(void)const)
[     Urbi.Version      ] Date: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Date
[         Urbi          ] create primitive < with C++ routine (type: bool (__thiscall urbi::object::Date::*)(class libport::intrusive_ptr<class urbi::object::Date>)const)
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Date::*)(class libport::intrusive_ptr<class urbi::object::Date>)const)
[         Urbi          ] create primitive + with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Date> (__thiscall urbi::object::Date::*)(class boost::posix_time::time_duration const &)const)
[         Urbi          ] create primitive asFloat with C++ routine (type: class boost::posix_time::time_duration (__thiscall urbi::object::Date::*)(void)const)
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Date::*)(void)const)
[         Urbi          ] create primitive epoch with C++ routine (type: class boost::posix_time::ptime (__cdecl*)(void))
[         Urbi          ] create primitive now with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Date> (__cdecl*)(void))
[     Urbi.Version      ] Barrier: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Barrier
[         Urbi          ] create primitive new with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Barrier> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive signal with C++ routine (type: unsigned int (__thiscall urbi::object::Barrier::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive signalAll with C++ routine (type: unsigned int (__thiscall urbi::object::Barrier::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive wait with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Barrier::*)(void))
[     Urbi.Version      ] Hash: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Hash
[         Urbi          ] create primitive == with C++ routine (type: bool (__thiscall urbi::object::Hash::*)(class libport::intrusive_ptr<class urbi::object::Hash>)const)
[         Urbi          ] create primitive asFloat with C++ routine (type: double (__thiscall urbi::object::Hash::*)(void)const)
[         Urbi          ] create primitive combine with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Hash> (__thiscall urbi::object::Hash::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[     Urbi.Version      ] UConnection: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object UConnection
[         Urbi          ] create primitive source with C++ routine (type: class boost::function1<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class urbi::object::UConnection &>)
[         Urbi          ] create primitive target with C++ routine (type: class boost::function1<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class urbi::object::UConnection &>)
[         Urbi          ] create primitive enabled with C++ routine (type: class boost::function1<bool,class urbi::object::UConnection &>)
[         Urbi          ] create primitive minInterval with C++ routine (type: class boost::function1<double,class urbi::object::UConnection &>)
[         Urbi          ] create primitive lastCall with C++ routine (type: class boost::function1<double,class urbi::object::UConnection &>)
[         Urbi          ] create primitive callCount with C++ routine (type: class boost::function1<long,class urbi::object::UConnection &>)
[         Urbi          ] create primitive totalCallTime with C++ routine (type: class boost::function1<double,class urbi::object::UConnection &>)
[         Urbi          ] create primitive minCallTime with C++ routine (type: class boost::function1<double,class urbi::object::UConnection &>)
[         Urbi          ] create primitive maxCallTime with C++ routine (type: class boost::function1<double,class urbi::object::UConnection &>)
[         Urbi          ] create primitive asynchronous with C++ routine (type: class boost::function1<bool,class urbi::object::UConnection &>)
[     Urbi.Version      ] Profile: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Profile
[         Urbi          ] create primitive calls with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> (__cdecl*)(class urbi::object::Profile *))
[         Urbi          ] create primitive maxFunctionCallDepth with C++ routine (type: unsigned int (__thiscall urbi::object::Profile::*)(void)const)
[         Urbi          ] create primitive totalCalls with C++ routine (type: unsigned int (__thiscall urbi::object::Profile::*)(void)const)
[         Urbi          ] create primitive totalTime with C++ routine (type: double (__thiscall urbi::object::Profile::*)(void)const)
[         Urbi          ] create primitive wallClockTime with C++ routine (type: double (__thiscall urbi::object::Profile::*)(void)const)
[         Urbi          ] create primitive yields with C++ routine (type: unsigned int (__thiscall urbi::object::Profile::*)(void)const)
[     Urbi.Version      ] FunctionProfile: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object FunctionProfile
[         Urbi          ] create primitive name with C++ routine (type: class libport::Symbol const & (__thiscall urbi::object::FunctionProfile::*)(void)const)
[         Urbi          ] create primitive calls with C++ routine (type: unsigned int (__thiscall urbi::object::FunctionProfile::*)(void)const)
[         Urbi          ] create primitive selfTime with C++ routine (type: double (__thiscall urbi::object::FunctionProfile::*)(void)const)
[         Urbi          ] create primitive selfTimePer with C++ routine (type: double (__thiscall urbi::object::FunctionProfile::*)(void)const)
[         Urbi          ] create primitive time with C++ routine (type: double (__thiscall urbi::object::FunctionProfile::*)(void)const)
[     Urbi.Version      ] FormatInfo: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object FormatInfo
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::FormatInfo::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive pattern with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive alignment with C++ routine (type: enum urbi::object::FormatInfo::Align::position (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive alt with C++ routine (type: bool (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive group with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive pad with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive precision with C++ routine (type: unsigned int (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive prefix with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive spec with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive uppercase with C++ routine (type: enum urbi::object::FormatInfo::Case::mode (__thiscall urbi::object::FormatInfo::*)(void)const)
[         Urbi          ] create primitive width with C++ routine (type: unsigned int (__thiscall urbi::object::FormatInfo::*)(void)const)
[     Urbi.Version      ] Formatter: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ] register C++ object Formatter
[         Urbi          ] create primitive init with C++ routine (type: void (__thiscall urbi::object::Formatter::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] create primitive data with C++ routine (type: class libport::intrusive_ptr<class urbi::object::List> const & (__thiscall urbi::object::Formatter::*)(void)const)
[         Urbi          ] create primitive % with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Formatter::*)(class libport::intrusive_ptr<class urbi::object::Object> const &)const)
[         Urbi          ] create primitive uid with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Object::*)(void)const)
[         Urbi          ] create primitive slotAdded with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::Object::*)(void)const)
[         Urbi          ] create primitive slotRemoved with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Event> (__thiscall urbi::object::Object::*)(void)const)
[         Urbi          ] create primitive refCount with C++ routine (type: int (__thiscall libport::RefCounted::*)(void)const)
[         Urbi          ] create primitive addProto with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Object::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive hash with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Hash> (__thiscall urbi::object::Object::*)(void)const)
[         Urbi          ] create primitive removeProto with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::Object::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive sleep with C++ routine (type: void (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object> const &,double))
[         Urbi          ] extend primitive sleep with C++ routine (type: void (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object> const &))
[         Urbi          ] create primitive eval with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] extend primitive eval with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ] create primitive loadFile with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ] extend primitive loadFile with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__cdecl*)(class libport::intrusive_ptr<class urbi::object::Object>,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class libport::intrusive_ptr<class urbi::object::Object>))
[     Urbi.UServer      ] setting up ghost connection.
[   Urbi.StreamBuffer   ]   new StreamBuffer.
[    Sched.Coroutine    ]   Create coroutine: 006AD070.
[      Urbi.Shell       ]   new shell: shell 006B2E98
[    Sched.Coroutine    ]   Create coroutine: 006AD0B0.
[     Urbi.UServer      ] looking for urbi/urbi.u
[     Libport.Path      ]   exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\urbi.u
[     Libport.Path      ]   exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\urbi.u
[     Urbi.UServer      ]   loading E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\urbi.u
[   Urbi.StreamBuffer   ]   posting 24 bytes of data.
[   Urbi.StreamBuffer   ]   posting 512 bytes of data.
[   Urbi.StreamBuffer   ]   posting 512 bytes of data.
[   Urbi.StreamBuffer   ]   posting 512 bytes of data.
[   Urbi.StreamBuffer   ]   posting 512 bytes of data.
[   Urbi.StreamBuffer   ]   posting 512 bytes of data.
[   Urbi.StreamBuffer   ]   posting 506 bytes of data.
[   Urbi.StreamBuffer   ]   posting 7 bytes of data.
[     Urbi.UServer      ] going to work until urbi.u is processed.
[         Sched         ]   ======================================================== cycle 1
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: to_start in state to_start
[         Sched         ]   Starting job Job(shell) root job state: to_start
[         Sched         ]   Job Job(shell) root job state: to_start is starting
[    Sched.Coroutine    ]   Start coroutine: 006AD070.
[         Sched         ] job 006B2E98: run
[      Urbi.Shell       ] shell: reading command.
[     Urbi.Scanner      ]   LexerInput (max size = 8192)
[   Urbi.StreamBuffer   ]     requesting new data.
[   Urbi.StreamBuffer   ]       3097 bytes available, swapping buffers.
[   Urbi.StreamBuffer   ]       available data: "//#push 1 \"urbi/urbi.u\"\n/*\n * Copyright (C) 2007-2011, Gostai S.A.S.\n *\n * This software is provided \"as is\" without warranty of any kind,\n * either expressed or implied, including but not limited to the\n * implied warranties of fitness for a particular purpose.\n *\n * See the LICENSE file for more information.\n */\n\ndo (Object)\n{\n  var isVoid = false;\n  function acceptVoid()   { this };\n  function unacceptVoid() { this };\n};\ndo (void.acceptVoid)\n{\n  function acceptVoid()   { new };\n  function unacceptVoid() { protos.front };\n};\n\nSystem.loadFile(System.searchFile(\"urbi/object.u\"));\nSystem.loadFile(System.searchFile(\"urbi/system.u\"));\nSystem.load(\"urbi/global.u\");\nSystem.load(\"urbi/platform\" + System.urbiLibrarySuffix + \".u\");\n\nrequireFile(\"urbi/traceable.u\");\nrequireFile(\"urbi/exception.u\");\nrequireFile(\"urbi/call-message.u\");\nrequireFile(\"urbi/comparable.u\");\nrequireFile(\"urbi/container.u\");\nrequireFile(\"urbi/lazy.u\");\nrequireFile(\"urbi/range-iterable.u\");\nrequireFile(\"urbi/list.u\");\nrequireFile(\"urbi/singleton.u\");\n\nrequireFile(\"urbi/boolean.u\");\nrequireFile(\"urbi/nil.u\");\nrequireFile(\"urbi/control.u\");\nrequireFile(\"urbi/channel.u\");\n\n// Disable top-level display\nChannel.topLevel.enabled = false;\n\n// Provide !=.\nObject.addProto(Comparable);\n\nrequireFile(\"urbi/orderable.u\");\nList.protos.insertBack(Global.Orderable);\n\nrequireFile(\"urbi/updatehook-stack.u\");\n\nrequireFile(\"urbi/binary.u\");\nrequireFile(\"urbi/code.u\");\nrequireFile(\"urbi/date.u\");\nrequireFile(\"urbi/dictionary.u\");\nrequireFile(\"urbi/directory.u\");\nrequireFile(\"urbi/file.u\");\nrequireFile(\"urbi/path.u\");\nrequireFile(\"urbi/loadable.u\");\nrequireFile(\"urbi/duration.u\");\nrequireFile(\"urbi/enumeration.u\");\nrequireFile(\"urbi/event.u\");\nrequireFile(\"urbi/float.u\");\nrequireFile(\"urbi/group.u\");\nrequireFile(\"urbi/kernel1.u\");\nrequireFile(\"urbi/job.u\");\nrequireFile(\"urbi/lobby.u\");\nrequireFile(\"urbi/math.u\");\nrequireFile(\"urbi/mutex.u\");\nrequireFile(\"urbi/package-info.u\");\nrequireFile(\"urbi/pattern.u\");\nrequireFile(\"urbi/profile.u\");\nrequireFile(\"urbi/pubsub.u\");\nrequireFile(\"urbi/socket.u\");\nrequireFile(\"urbi/stack-frame.u\");\nrequireFile(\"urbi/string.u\");\nrequireFile(\"urbi/tag.u\");\nrequireFile(\"urbi/timeout.u\");\nrequireFile(\"urbi/trajectory-generator.u\");\nrequireFile(\"urbi/tuple.u\");\nrequireFile(\"urbi/weak-pointer.u\");\n// Enhance requireFile thanks to previous loadings.\nrequireFile(\"urbi/require-file.u\");\n\n/*----------.\n| UObject.  |\n`----------*/\n\n\"Initializing uobjects NOW\";\nrequireFile(\"urbi/uobject.u\");\n\nif (\"ros\" in Platform.enabledModules && System.getenv(\"ROS_ROOT\"))\n  loadModule(\"urbi/ros\");\n\n// These guys are loading modules via loadModule, which needs\n// UObject.searchPath, which is defined by urbi/uobject.u.\nif (!System.Platform.compilationModeSpace)\n{\n  requireFile(\"urbi/formatter.u\");\n  requireFile(\"urbi/input-stream.u\");\n  requireFile(\"urbi/logger.u\");\n  requireFile(\"urbi/process.u\");\n  requireFile(\"urbi/regexp.u\");\n};\n\nChannel.topLevel.enabled = true |\nSystem.defaultIsSystem = false |\n// Used by initialization code to detect the end of urbi.u.\nvar Object.loaded = true |;\n//#pop\n".
[   Urbi.StreamBuffer   ]       return: 2f.
[     Urbi.Scanner      ]     3097 bytes
[     Urbi.Scanner      ] LexerInput (max size = 8192)
[     Urbi.Scanner      ]   24 bytes
[     Urbi.Scanner      ] LexerInput (max size = 8192)
[     Urbi.Scanner      ]   0 bytes
[       Urbi.Bind       ] Push
[       Urbi.Bind       ]   Pop
[       Urbi.Bind       ] Push
[       Urbi.Bind       ]   Pop
[      Urbi.Shell       ] shell: executing command (0064FC68).
[      Urbi.Shell       ]   shell: command: do (Object) {
  var isVoid = false;
  var acceptVoid = function () { this };
  var unacceptVoid = function () { this };
};
[      Urbi.Stack       ]   Call Object
[      Urbi.Stack       ]   Call false
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 2
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 3
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 4
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[       Urbi.Bind       ] Push
[       Urbi.Bind       ]   Pop
[       Urbi.Bind       ] Push
[       Urbi.Bind       ]   Pop
[      Urbi.Shell       ] shell: executing command (0064FA88).
[      Urbi.Shell       ]   shell: command: do (void.acceptVoid) {
  var acceptVoid = function () { new };
  var unacceptVoid = function () { protos.front };
};
[      Urbi.Stack       ]   Call void
[      Urbi.Stack       ]   Call acceptVoid
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 5
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 6
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: System.loadFile(System.searchFile("urbi/object.u"));
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call searchFile
[     Libport.Path      ]     exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\object.u
[     Libport.Path      ]     exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\object.u
[      Urbi.Stack       ]   Call loadFile
[         Urbi          ]     Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\object.u
[     Libport.Path      ]       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\object.u
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         3983 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         22 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         23 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         25 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         32 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         38 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         21 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking value to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind res
[       Urbi.Bind       ]         Linking protos to its declaration
[       Urbi.Bind       ]         Linking protos to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking name to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking name to its declaration
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking to to its declaration
[       Urbi.Bind       ]         Linking from to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking to to its declaration
[       Urbi.Bind       ]         Linking from to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind add
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking p to its declaration
[       Urbi.Bind       ]           Linking add to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Linking ps to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking rhs to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind res
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking type to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking f to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking slot to its declaration
[       Urbi.Bind       ]         Linking slot to its declaration
[       Urbi.Bind       ]         Linking slot to its declaration
[       Urbi.Bind       ]         Linking slot to its declaration
[       Urbi.Bind       ]         Linking value to its declaration
[       Urbi.Bind       ]         Linking slot to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking s to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind res
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking fn to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Linking x to its declaration
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind <
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking r to its declaration
[       Urbi.Bind       ]           Linking l to its declaration
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Bind echo
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking m to its declaration
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Linking echo to its declaration
[       Urbi.Bind       ]         Linking echo to its declaration
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking p to its declaration
[       Urbi.Bind       ]           Linking echo to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Bind slots
[       Urbi.Bind       ]         Linking deep to its declaration
[       Urbi.Bind       ]         Linking echo to its declaration
[       Urbi.Bind       ]         Linking echo to its declaration
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Bind o
[       Urbi.Bind       ]           Linking s to its declaration
[       Urbi.Bind       ]           Bind ps
[       Urbi.Bind       ]           Linking s to its declaration
[       Urbi.Bind       ]           Linking o to its declaration
[       Urbi.Bind       ]           Bind constant
[       Urbi.Bind       ]           Linking ps to its declaration
[       Urbi.Bind       ]           Linking ps to its declaration
[       Urbi.Bind       ]           Linking s to its declaration
[       Urbi.Bind       ]           Linking constant to its declaration
[       Urbi.Bind       ]           Linking s to its declaration
[       Urbi.Bind       ]           Linking o to its declaration
[       Urbi.Bind       ]           Linking deep to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Linking o to its declaration
[       Urbi.Bind       ]           Linking o to its declaration
[       Urbi.Bind       ]           Linking echo to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Linking ps to its declaration
[       Urbi.Bind       ]           Linking echo to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Linking p to its declaration
[       Urbi.Bind       ]             Linking p to its declaration
[       Urbi.Bind       ]             Linking ps to its declaration
[       Urbi.Bind       ]             It's captured
[       Urbi.Bind       ]             Linking p to its declaration
[       Urbi.Bind       ]             Linking ps to its declaration
[       Urbi.Bind       ]             It's captured
[       Urbi.Bind       ]             Linking echo to its declaration
[       Urbi.Bind       ]             It's captured
[       Urbi.Bind       ]             Pop
[       Urbi.Bind       ]           Linking < to its declaration
[       Urbi.Bind       ]           It's captured
[       Urbi.Bind       ]           Linking ps to its declaration
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Linking < to its declaration
[       Urbi.Bind       ]         Linking slots to its declaration
[       Urbi.Bind       ]         Pop
[      Urbi.Stack       ]       Call Object
[      Urbi.Stack       ]       Call setProperty
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 7
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 8
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 9
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 10
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 11
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 12
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 13
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 14
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 15
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 16
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 17
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 18
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 19
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 20
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 21
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 22
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 23
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 24
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 25
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 26
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064F788).
[      Urbi.Shell       ]   shell: command: System.loadFile(System.searchFile("urbi/system.u"));
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call searchFile
[     Libport.Path      ]     exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\system.u
[     Libport.Path      ]     exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\system.u
[      Urbi.Stack       ]   Call loadFile
[         Urbi          ]     Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\system.u
[     Libport.Path      ]       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\system.u
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         4096 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         50 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         87 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         27 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         18 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         22 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         28 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         36 bytes
[     Urbi.Scanner      ]       LexerInput (max size = 8192)
[     Urbi.Scanner      ]         0 bytes
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking assertion to its declaration
[       Urbi.Bind       ]         Linking messageFail to its declaration
[       Urbi.Bind       ]         Bind $t
[       Urbi.Bind       ]         Linking $t to its declaration
[       Urbi.Bind       ]         Linking messagePass to its declaration
[       Urbi.Bind       ]         Linking $t to its declaration
[       Urbi.Bind       ]         Linking messagePass to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind message
[       Urbi.Bind       ]         Bind args
[       Urbi.Bind       ]         Bind target
[       Urbi.Bind       ]         Linking args to its declaration
[       Urbi.Bind       ]         Bind c
[       Urbi.Bind       ]         Linking message to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking args to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking target to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking target to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Bind formatArgsStr
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Bind messageFail
[       Urbi.Bind       ]         Linking formatArgsStr to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Bind messagePass
[       Urbi.Bind       ]         Linking formatArgsStr to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking c to its declaration
[       Urbi.Bind       ]         Linking messageFail to its declaration
[       Urbi.Bind       ]         Linking messagePass to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking value to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking isSystem to its declaration
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking target to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking s to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Bind res
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking target to its declaration
[       Urbi.Bind       ]         Linking isSystem to its declaration
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking res to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Bind path
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking path to its declaration
[       Urbi.Bind       ]         Bind $pattern
[       Urbi.Bind       ]         Bind e
[       Urbi.Bind       ]         Linking $pattern to its declaration
[       Urbi.Bind       ]         Linking e to its declaration
[       Urbi.Bind       ]         Linking path to its declaration
[       Urbi.Bind       ]         Linking path to its declaration
[       Urbi.Bind       ]         Linking channel to its declaration
[       Urbi.Bind       ]         Linking path to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Push
[       Urbi.Bind       ]           Linking t to its declaration
[       Urbi.Bind       ]           Pop
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking file to its declaration
[       Urbi.Bind       ]         Linking target to its declaration
[       Urbi.Bind       ]         Linking isSystem to its declaration
[       Urbi.Bind       ]         Pop
[       Urbi.Bind       ]       Push
[       Urbi.Bind       ]         Pop
[      Urbi.Stack       ]       Call System
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 27
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 28
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 29
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 30
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 31
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call getSlot
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 32
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 33
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setProperty
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 34
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 35
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 36
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call overrideSlot
[      Urbi.Stack       ]         Call +
[      Urbi.Stack       ]         Call copySlot
[      Urbi.Stack       ]           Call getSlot
[      Urbi.Stack       ]           Call setSlot
[      Urbi.Stack       ]         Call false
[      Urbi.Stack       ]         Call setProperty
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call true
[      Urbi.Stack       ]         Call setProperty
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 37
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call each
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\component.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\component.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]         Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]         Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 38
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]         job Job(shell) root job state: running resumed
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\naming-standard.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\naming-standard.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]         Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]         Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 39
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]         job Job(shell) root job state: running resumed
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\object.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\object.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]         Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]         Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 40
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]         job Job(shell) root job state: running resumed
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\system.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\system.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]         Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]         Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 41
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]         job Job(shell) root job state: running resumed
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\test-suite.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\test-suite.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]         Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]         Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 42
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]         job Job(shell) root job state: running resumed
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]           Call searchFile
[     Libport.Path      ]             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\urbi.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\urbi.u
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call addSystemFile
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 43
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 44
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 45
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 46
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 47
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 48
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 49
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 50
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call Tag
[      Urbi.Stack       ]       Call getSlot
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 51
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 52
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: System.load("urbi/global.u");
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call load
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call false
[      Urbi.Stack       ]     Call set
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call searchFile
[     Libport.Path      ]       exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\global.u
[     Libport.Path      ]       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\global.u
[      Urbi.Stack       ]     Call loadFile
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]       Call addSystemFile
[      Urbi.Stack       ]       Call loadFile$old
[         Urbi          ]         Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\global.u
[     Libport.Path      ]           exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\global.u
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             1008 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             0 bytes
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Linking args to its declaration
[       Urbi.Bind       ]             Pop
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind val
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               It's captured
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking val to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking val to its declaration
[       Urbi.Bind       ]               Linking val to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Pop
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Linking args to its declaration
[       Urbi.Bind       ]             Pop
[      Urbi.Stack       ]           Call Global
[      Urbi.Stack       ]           Call System
[      Urbi.Stack       ]           Call addProto
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 53
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call Object
[      Urbi.Stack       ]           Call removeProto
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 54
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 55
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 56
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[      Urbi.Stack       ]     Call acceptVoid
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call true
[      Urbi.Stack       ]     Call set
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call unacceptVoid
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 57
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FF68).
[      Urbi.Shell       ]   shell: command: System.load("urbi/platform".'+'(System.urbiLibrarySuffix).'+'(".u"));
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call urbiLibrarySuffix
[      Urbi.Stack       ]   Call +
[      Urbi.Stack       ]   Call +
[      Urbi.Stack       ]   Call load
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call false
[      Urbi.Stack       ]     Call set
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call searchFile
[     Libport.Path      ]       exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\platform-vc90-d.u
[     Libport.Path      ]       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\platform-vc90-d.u
[      Urbi.Stack       ]     Call loadFile
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]       Call addSystemFile
[      Urbi.Stack       ]       Call loadFile$old
[         Urbi          ]         Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\platform-vc90-d.u
[     Libport.Path      ]           exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\platform-vc90-d.u
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             793 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             0 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             25 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             0 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             74 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             0 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             79 bytes
[     Urbi.Scanner      ]           LexerInput (max size = 8192)
[     Urbi.Scanner      ]             0 bytes
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Bind $returnTag
[       Urbi.Bind       ]             Linking $returnTag to its declaration
[       Urbi.Bind       ]             Linking $returnTag to its declaration
[       Urbi.Bind       ]             Pop
[       Urbi.Bind       ]           Push
[       Urbi.Bind       ]             Pop
[      Urbi.Stack       ]           Call System
[      Urbi.Stack       ]           Call Object
[      Urbi.Stack       ]           Call class
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call +
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 58
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 59
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 60
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 61
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 62
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 63
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 64
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call true
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 65
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call false
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 66
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call false
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 67
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[         Sched         ]           Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]           Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 68
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]           job Job(shell) root job state: running resumed
[      Urbi.Stack       ]           Call setSlot
[      Urbi.Stack       ]           Call setConstSlot
[      Urbi.Stack       ]     Call acceptVoid
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call true
[      Urbi.Stack       ]     Call set
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call unacceptVoid
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 69
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E828).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/traceable.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\traceable.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\traceable.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\traceable.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\traceable.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               651 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               50 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking sf to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking sf to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 70
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 71
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 72
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 73
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/exception.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\exception.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\exception.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\exception.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\exception.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1544 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind b
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind chan
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Bind bt
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking bt to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking bt to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking bt to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking sf to its declaration
[       Urbi.Bind       ]                 Linking sf to its declaration
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking bt to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind loc
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking loc to its declaration
[       Urbi.Bind       ]               Linking loc to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Bind makeFmtException
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind locSize
[       Urbi.Bind       ]               Linking locSlots to its declaration
[       Urbi.Bind       ]               Bind fmtSize
[       Urbi.Bind       ]               Linking fmtSlots to its declaration
[       Urbi.Bind       ]               Bind Res
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking fmt to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking fmtSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking locSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking fmtSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking locSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking locSlots to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking locSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking fmtSlots to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking locSize to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking fmtSize to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind l
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking f to its declaration
[       Urbi.Bind       ]                   Linking f to its declaration
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking fmtSlots to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Linking fmt to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking inherit to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking Res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Bind makeMsgException
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking inherit to its declaration
[       Urbi.Bind       ]               Linking locSlots to its declaration
[       Urbi.Bind       ]               Linking makeFmtException to its declaration
[       Urbi.Bind       ]               It's captured
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Bind makeException
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking inherit to its declaration
[       Urbi.Bind       ]               Linking locSlots to its declaration
[       Urbi.Bind       ]               Linking makeMsgException to its declaration
[       Urbi.Bind       ]               It's captured
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking effective to its declaration
[       Urbi.Bind       ]               Linking min to its declaration
[       Urbi.Bind       ]               Linking max to its declaration
[       Urbi.Bind       ]               Linking max to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking fmt to its declaration
[       Urbi.Bind       ]               Linking effective to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Linking makeFmtException to its declaration
[       Urbi.Bind       ]             Linking makeFmtException to its declaration
[       Urbi.Bind       ]             Linking makeMsgException to its declaration
[       Urbi.Bind       ]             Linking makeFmtException to its declaration
[       Urbi.Bind       ]             Linking makeMsgException to its declaration
[       Urbi.Bind       ]             Linking makeMsgException to its declaration
[       Urbi.Bind       ]             Linking makeException to its declaration
[       Urbi.Bind       ]             Linking makeFmtException to its declaration
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking loc to its declaration
[       Urbi.Bind       ]               Linking input to its declaration
[       Urbi.Bind       ]               Linking isError to its declaration
[       Urbi.Bind       ]               Linking message to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking effective to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking index to its declaration
[       Urbi.Bind       ]               Linking exn to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking index to its declaration
[       Urbi.Bind       ]               Linking effective to its declaration
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking alternatives to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind exn
[       Urbi.Bind       ]               Linking effective to its declaration
[       Urbi.Bind       ]               Linking expected to its declaration
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking index to its declaration
[       Urbi.Bind       ]               Linking exn to its declaration
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking index to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking m to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking deep to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking m to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking s to its declaration
[       Urbi.Bind       ]               Linking p to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Linking makeMsgException to its declaration
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 74
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 75
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Traceable
[      Urbi.Stack       ]             Call addProto
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 76
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 77
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 78
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 79
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 80
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 81
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 82
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 83
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 84
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 85
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 86
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 87
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 88
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 89
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 90
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 91
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 92
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 93
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 94
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 95
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 96
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 97
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call BadNumber
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 98
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call BadNumber
[      Urbi.Stack       ]             Call makeFmtException
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 99
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 100
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 101
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 102
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 103
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 104
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 105
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call BadNumber
[      Urbi.Stack       ]             Call makeFmtException
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 106
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 107
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 108
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 109
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 110
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 111
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 112
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call BadNumber
[      Urbi.Stack       ]             Call makeMsgException
[      Urbi.Stack       ]               Call makeFmtException
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 113
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 114
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call class
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call setProtos
[      Urbi.Stack       ]                     Call Object
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call protos
[      Urbi.Stack       ]                     Call clear
[      Urbi.Stack       ]                     Call reverse
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                           Call apply
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                 Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 115
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 116
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 117
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 118
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call removeSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 119
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeFmtException
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 120
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 121
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 122
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 123
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 124
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 125
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 126
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeMsgException
[      Urbi.Stack       ]               Call makeFmtException
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 127
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 128
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call class
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call setProtos
[      Urbi.Stack       ]                     Call Object
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call protos
[      Urbi.Stack       ]                     Call clear
[      Urbi.Stack       ]                     Call reverse
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                           Call apply
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                 Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 129
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 130
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 131
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 132
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call removeSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 133
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeMsgException
[      Urbi.Stack       ]               Call makeFmtException
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 134
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 135
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call class
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call setProtos
[      Urbi.Stack       ]                     Call Object
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call protos
[      Urbi.Stack       ]                     Call clear
[      Urbi.Stack       ]                     Call reverse
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                           Call apply
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                 Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 136
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 137
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 138
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 139
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call removeSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 140
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeException
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call message
[      Urbi.Stack       ]               Call makeMsgException
[      Urbi.Stack       ]                 Call makeFmtException
[      Urbi.Stack       ]                   Call size
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 141
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call size
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 142
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call class
[      Urbi.Stack       ]                     Call Object
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call setProtos
[      Urbi.Stack       ]                       Call Object
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call protos
[      Urbi.Stack       ]                       Call clear
[      Urbi.Stack       ]                       Call reverse
[      Urbi.Stack       ]                       Call each|
[      Urbi.Stack       ]                         Call each
[      Urbi.Stack       ]                           Call apply
[      Urbi.Stack       ]                             Call apply
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 143
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 144
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 145
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 146
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call Exception
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call removeSlot
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 147
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeFmtException
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 148
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call size
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 149
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 150
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 151
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 152
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 153
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 154
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 155
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 156
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 157
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 158
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 159
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 160
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 161
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 162
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 163
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 164
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 165
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 166
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 167
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 168
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 169
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 170
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Argument
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 171
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 172
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 173
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 174
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 175
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 176
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 177
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 178
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 179
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 180
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 181
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 182
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 183
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 184
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call makeMsgException
[      Urbi.Stack       ]               Call makeFmtException
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 185
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call size
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 186
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call class
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call setProtos
[      Urbi.Stack       ]                     Call Object
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call protos
[      Urbi.Stack       ]                     Call clear
[      Urbi.Stack       ]                     Call reverse
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                           Call apply
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                 Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 187
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 188
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 189
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 190
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call Exception
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call removeSlot
[      Urbi.Stack       ]               Call Exception
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 191
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/call-message.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\call-message.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\call-message.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\call-message.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\call-message.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               3821 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind unevaluated
[       Urbi.Bind       ]               Linking unevaluated to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking unevaluated to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking arg to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking k to its declaration
[       Urbi.Bind       ]               Linking k to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Linking formatArgs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 192
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 193
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 194
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 195
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 196
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 197
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 198
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 199
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 200
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 201
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 202
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 203
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 204
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 205
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 206
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call $opNeg
[      Urbi.Stack       ]             Call keys
[      Urbi.Stack       ]             Call each|
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call get
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call get
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call get
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call get
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call $opNeg
[      Urbi.Stack       ]                 Call get
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 207
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call hash
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 208
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 209
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 210
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 211
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/comparable.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\comparable.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\comparable.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\comparable.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\comparable.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               446 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking that to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking that to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 212
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 213
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 214
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EF48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/container.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\container.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\container.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\container.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\container.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               425 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 215
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 216
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 217
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EA68).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/lazy.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\lazy.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lazy.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lazy.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lazy.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1145 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind c
[       Urbi.Bind       ]               Linking c to its declaration
[       Urbi.Bind       ]               Linking c to its declaration
[       Urbi.Bind       ]               Linking c to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 218
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 219
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 220
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 221
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 222
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 223
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 224
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 225
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 226
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Lazy
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 227
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/range-iterable.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\range-iterable.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\range-iterable.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\range-iterable.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\range-iterable.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1081 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 228
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 229
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 230
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 231
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 232
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 233
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/list.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\list.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\list.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\list.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\list.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4047 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               127 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               127 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               124 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               21 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               61 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking that to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking that to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking that to its declaration
[       Urbi.Bind       ]               Linking that to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking rhs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Linking a to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Linking a to its declaration
[       Urbi.Bind       ]                 Linking comp to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Linking a to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Bind size
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking size to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking comp to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking elt to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking elt to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking action to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking e to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking e to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking prefix to its declaration
[       Urbi.Bind       ]               Linking suffix to its declaration
[       Urbi.Bind       ]               Linking sep to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking to to its declaration
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Linking to to its declaration
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Bind $save
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking $save to its declaration
[       Urbi.Bind       ]               Linking to to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking that to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking pattern to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking e to its declaration
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind $save
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $save to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Linking a to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking comp to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Linking a to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking comp to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 234
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 235
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 236
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 237
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call List
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Container
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]               Call updateHook
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 238
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 239
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 240
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 241
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 242
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 243
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 244
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 245
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 246
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 247
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 248
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 249
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 250
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 251
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 252
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 253
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 254
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 255
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 256
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 257
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 258
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 259
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 260
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/singleton.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\singleton.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\singleton.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\singleton.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\singleton.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               496 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 261
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 262
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 263
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 264
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/boolean.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\boolean.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\boolean.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\boolean.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\boolean.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               651 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 265
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 266
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call Singleton
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 267
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 268
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 269
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 270
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call Singleton
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 271
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 272
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 273
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 274
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EF48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/nil.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\nil.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\nil.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\nil.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\nil.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               590 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 275
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call Singleton
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 276
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 277
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 278
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 279
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 280
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EBE8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/control.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\control.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\control.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\control.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\control.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1117 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking c to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking c to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking delay to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking delay to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Bind delta
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking delta to its declaration
[       Urbi.Bind       ]               Linking delta to its declaration
[       Urbi.Bind       ]               Linking delta to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 281
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 282
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 283
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 284
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 285
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 286
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EA68).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/channel.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\channel.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\channel.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\channel.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\channel.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2780 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind toPrint
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Linking toPrint to its declaration
[       Urbi.Bind       ]               Linking toPrint to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking filter to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind keep
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 287
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 288
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 289
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 290
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 291
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 292
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 293
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 294
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 295
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 296
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 297
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 298
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Lobby
[      Urbi.Stack       ]             Call topLevel
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 299
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 300
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call warning
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 301
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 302
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call null
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 303
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 304
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Channel
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Channel
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 305
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 306
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 307
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 308
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 309
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Channel
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 310
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Channel
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 311
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call cerr
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 312
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Channel
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 313
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 314
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]         Call protos
[      Urbi.Stack       ]         Call front
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 315
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E948).
[      Urbi.Shell       ]   shell: command: Channel.topLevel.enabled = false;
[      Urbi.Stack       ]   Call Channel
[      Urbi.Stack       ]   Call topLevel
[      Urbi.Stack       ]   Call false
[      Urbi.Stack       ]   Call updateSlot
[      Urbi.Stack       ]   Call <<
[      Urbi.Stack       ]     Call enabled
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 316
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: Object.addProto(Comparable);
[      Urbi.Stack       ]   Call Object
[      Urbi.Stack       ]   Call Comparable
[      Urbi.Stack       ]   Call addProto
[      Urbi.Stack       ]   Call <<
[      Urbi.Stack       ]     Call enabled
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 317
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E948).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/orderable.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\orderable.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\orderable.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\orderable.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\orderable.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               713 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 318
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 319
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 320
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 321
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 322
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 323
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 324
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (039C9320).
[      Urbi.Shell       ]   shell: command: List.protos.insertBack(Global.Orderable);
[      Urbi.Stack       ]   Call List
[      Urbi.Stack       ]   Call protos
[      Urbi.Stack       ]   Call Global
[      Urbi.Stack       ]   Call Orderable
[      Urbi.Stack       ]   Call insertBack
[      Urbi.Stack       ]   Call <<
[      Urbi.Stack       ]     Call enabled
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 325
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EA68).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/updatehook-stack.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\updatehook-stack.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\updatehook-stack.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\updatehook-stack.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\updatehook-stack.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1632 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               17 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind myself
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking hook to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking value to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking myself to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Bind old
[       Urbi.Bind       ]               Linking slot to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking slot to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking old to its declaration
[       Urbi.Bind       ]               Linking old to its declaration
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Linking slot to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Bind setProperty
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking prop to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Linking prop to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Linking prop to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Linking prop to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Linking prop to its declaration
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking setProperty to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking old to its declaration
[       Urbi.Bind       ]               Linking slot to its declaration
[       Urbi.Bind       ]               Linking old to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 326
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 327
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 328
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 329
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 330
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 331
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 332
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 333
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 334
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 335
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 336
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 337
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/binary.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\binary.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\binary.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\binary.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\binary.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1540 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking k to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 338
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 339
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 340
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 341
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 342
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 343
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 344
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call addProto
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 345
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call removeProto
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 346
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 347
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 348
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 349
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 350
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 351
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 352
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/code.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\code.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\code.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\code.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\code.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               462 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 353
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 354
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 355
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 356
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call addProto
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 357
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EBE8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/date.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\date.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\date.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\date.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\date.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               455 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 358
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 359
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Date
[      Urbi.Stack       ]             Call Orderable
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 360
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 361
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/dictionary.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\dictionary.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\dictionary.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\dictionary.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\dictionary.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2524 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind sep
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking sep to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking sep to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking insert to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking otherwise to its declaration
[       Urbi.Bind       ]               Linking otherwise to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking k to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking rhs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking rhs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking item to its declaration
[       Urbi.Bind       ]                 Linking item to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking ext to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking pattern to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 362
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 363
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 364
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 365
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 366
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 367
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 368
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 369
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 370
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 371
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Dictionary
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Container
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]               Call updateHook
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 372
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Exception
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 373
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 374
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 375
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 376
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 377
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 378
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 379
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 380
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 381
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 382
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E8E8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/directory.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\directory.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\directory.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\directory.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\directory.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2040 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind dir
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Linking routine to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Bind path
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind path
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Bind path
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking path to its declaration
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind dir
[       Urbi.Bind       ]               Linking dirname to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking item to its declaration
[       Urbi.Bind       ]                 Linking dir to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking dir to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking item to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call load
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call searchFile
[     Libport.Path      ]                   exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\file.u
[     Libport.Path      ]                   exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\file.u
[      Urbi.Stack       ]                 Call loadFile
[      Urbi.Stack       ]                   Call asString
[      Urbi.Stack       ]                   Call addSystemFile
[      Urbi.Stack       ]                   Call loadFile$old
[         Urbi          ]                     Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\file.u
[     Libport.Path      ]                       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\file.u
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         855 bytes
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         0 bytes
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Linking rhs to its declaration
[       Urbi.Bind       ]                         Linking action to its declaration
[       Urbi.Bind       ]                         Linking routine to its declaration
[       Urbi.Bind       ]                         Pop
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Linking filename to its declaration
[       Urbi.Bind       ]                         Linking filename to its declaration
[       Urbi.Bind       ]                         Pop
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Linking dir to its declaration
[       Urbi.Bind       ]                         Pop
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Linking dir to its declaration
[       Urbi.Bind       ]                         Pop
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Bind o
[       Urbi.Bind       ]                         Linking name to its declaration
[       Urbi.Bind       ]                         Linking content to its declaration
[       Urbi.Bind       ]                         Linking o to its declaration
[       Urbi.Bind       ]                         Linking o to its declaration
[       Urbi.Bind       ]                         Pop
[      Urbi.Stack       ]                       Call requireFile
[      Urbi.Stack       ]                         Call defaultIsSystem
[      Urbi.Stack       ]                         Call $loadedFiles
[      Urbi.Stack       ]                         Call has
[      Urbi.Stack       ]                           Call hash
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                         Call $requireWait
[      Urbi.Stack       ]                         Call void
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 383
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call File
[      Urbi.Stack       ]                       Call protos
[      Urbi.Stack       ]                       Call RangeIterable
[      Urbi.Stack       ]                       Call <<
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 384
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 385
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 386
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 387
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 388
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[      Urbi.Stack       ]                 Call acceptVoid
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call true
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call unacceptVoid
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 389
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]               Call load
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                 Call searchFile
[     Libport.Path      ]                   exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\path.u
[     Libport.Path      ]                   exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\path.u
[      Urbi.Stack       ]                 Call loadFile
[      Urbi.Stack       ]                   Call asString
[      Urbi.Stack       ]                   Call addSystemFile
[      Urbi.Stack       ]                   Call loadFile$old
[         Urbi          ]                     Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\path.u
[     Libport.Path      ]                       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\path.u
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         492 bytes
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         0 bytes
[      Urbi.Stack       ]                       Call requireFile
[      Urbi.Stack       ]                         Call defaultIsSystem
[      Urbi.Stack       ]                         Call $loadedFiles
[      Urbi.Stack       ]                         Call has
[      Urbi.Stack       ]                           Call hash
[      Urbi.Stack       ]                         Call load
[      Urbi.Stack       ]                           Call $loadedFiles
[      Urbi.Stack       ]                           Call false
[      Urbi.Stack       ]                           Call set
[      Urbi.Stack       ]                             Call hash
[      Urbi.Stack       ]                             Call hash
[      Urbi.Stack       ]                           Call searchFile
[     Libport.Path      ]                             exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\loadable.u
[     Libport.Path      ]                             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\loadable.u
[      Urbi.Stack       ]                           Call loadFile
[      Urbi.Stack       ]                             Call asString
[      Urbi.Stack       ]                             Call addSystemFile
[      Urbi.Stack       ]                             Call loadFile$old
[         Urbi          ]                               Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\loadable.u
[     Libport.Path      ]                                 exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\loadable.u
[     Urbi.Scanner      ]                                 LexerInput (max size = 8192)
[     Urbi.Scanner      ]                                   686 bytes
[     Urbi.Scanner      ]                                 LexerInput (max size = 8192)
[     Urbi.Scanner      ]                                   0 bytes
[       Urbi.Bind       ]                                 Push
[       Urbi.Bind       ]                                   Linking val to its declaration
[       Urbi.Bind       ]                                   Pop
[       Urbi.Bind       ]                                 Push
[       Urbi.Bind       ]                                   Pop
[       Urbi.Bind       ]                                 Push
[       Urbi.Bind       ]                                   Pop
[       Urbi.Bind       ]                                 Push
[       Urbi.Bind       ]                                   Pop
[      Urbi.Stack       ]                                 Call requireFile
[      Urbi.Stack       ]                                   Call defaultIsSystem
[      Urbi.Stack       ]                                   Call $loadedFiles
[      Urbi.Stack       ]                                   Call has
[      Urbi.Stack       ]                                     Call hash
[      Urbi.Stack       ]                                     Call ==
[      Urbi.Stack       ]                                   Call $requireWait
[      Urbi.Stack       ]                                   Call void
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 390
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call requireFile
[      Urbi.Stack       ]                                   Call defaultIsSystem
[      Urbi.Stack       ]                                   Call $loadedFiles
[      Urbi.Stack       ]                                   Call has
[      Urbi.Stack       ]                                     Call hash
[      Urbi.Stack       ]                                     Call ==
[      Urbi.Stack       ]                                   Call $requireWait
[      Urbi.Stack       ]                                   Call void
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 391
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call requireFile
[      Urbi.Stack       ]                                   Call defaultIsSystem
[      Urbi.Stack       ]                                   Call $loadedFiles
[      Urbi.Stack       ]                                   Call has
[      Urbi.Stack       ]                                     Call hash
[      Urbi.Stack       ]                                     Call ==
[      Urbi.Stack       ]                                   Call $requireWait
[      Urbi.Stack       ]                                   Call void
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 392
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call requireFile
[      Urbi.Stack       ]                                   Call defaultIsSystem
[      Urbi.Stack       ]                                   Call $loadedFiles
[      Urbi.Stack       ]                                   Call has
[      Urbi.Stack       ]                                     Call hash
[      Urbi.Stack       ]                                     Call ==
[      Urbi.Stack       ]                                     Call ==
[      Urbi.Stack       ]                                   Call $requireWait
[      Urbi.Stack       ]                                   Call void
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 393
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call Global
[      Urbi.Stack       ]                                 Call Object
[      Urbi.Stack       ]                                 Call class
[      Urbi.Stack       ]                                   Call Object
[      Urbi.Stack       ]                                   Call clone
[      Urbi.Stack       ]                                   Call setSlot
[      Urbi.Stack       ]                                   Call +
[      Urbi.Stack       ]                                   Call setSlot
[      Urbi.Stack       ]                                 Call false
[      Urbi.Stack       ]                                 Call setSlot
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 394
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call setSlot
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 395
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call setSlot
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 396
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call setSlot
[         Sched         ]                                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 397
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                                 Call setSlot
[      Urbi.Stack       ]                                 Call setConstSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call $loadedFiles
[      Urbi.Stack       ]                           Call true
[      Urbi.Stack       ]                           Call set
[      Urbi.Stack       ]                             Call hash
[      Urbi.Stack       ]                             Call ==
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                         Call void
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 398
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call requireFile
[      Urbi.Stack       ]                         Call defaultIsSystem
[      Urbi.Stack       ]                         Call $loadedFiles
[      Urbi.Stack       ]                         Call has
[      Urbi.Stack       ]                           Call hash
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                         Call $requireWait
[      Urbi.Stack       ]                         Call void
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 399
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call requireFile
[      Urbi.Stack       ]                         Call defaultIsSystem
[      Urbi.Stack       ]                         Call $loadedFiles
[      Urbi.Stack       ]                         Call has
[      Urbi.Stack       ]                           Call hash
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                         Call $requireWait
[      Urbi.Stack       ]                         Call void
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 400
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call Path
[      Urbi.Stack       ]                       Call Orderable
[      Urbi.Stack       ]                       Call Comparable
[      Urbi.Stack       ]                       Call setProtos
[      Urbi.Stack       ]                         Call Object
[      Urbi.Stack       ]                         Call getSlot
[      Urbi.Stack       ]                         Call protos
[      Urbi.Stack       ]                         Call clear
[      Urbi.Stack       ]                         Call reverse
[      Urbi.Stack       ]                         Call each|
[      Urbi.Stack       ]                           Call each
[      Urbi.Stack       ]                             Call apply
[      Urbi.Stack       ]                               Call apply
[      Urbi.Stack       ]                           Call each
[      Urbi.Stack       ]                             Call apply
[      Urbi.Stack       ]                               Call apply
[      Urbi.Stack       ]                 Call acceptVoid
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call true
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call unacceptVoid
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 401
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 402
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Directory
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 403
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 404
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 405
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 406
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 407
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 408
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 409
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 410
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/file.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call $requireWait
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 411
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/path.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call $requireWait
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 412
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E8E8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/loadable.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call $requireWait
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 413
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/duration.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\duration.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\duration.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\duration.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\duration.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               441 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 414
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 415
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 416
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Duration
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 417
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/enumeration.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\enumeration.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\enumeration.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\enumeration.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\enumeration.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1063 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind val
[       Urbi.Bind       ]                 Linking value to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Linking value to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking values to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 418
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 419
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 420
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 421
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 422
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 423
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 424
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 425
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call protos
[      Urbi.Stack       ]             Call Container
[      Urbi.Stack       ]             Call <<
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 426
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 427
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 428
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 429
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 430
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 431
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/event.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\event.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\event.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\event.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\event.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1492 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               5 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               10 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               209 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               24 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind handler
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Bind control
[       Urbi.Bind       ]               Bind handler
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking control to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking duration to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $payload to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking control to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking handler to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 432
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 433
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 434
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 435
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (00650028).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/float.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\float.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\float.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\float.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\float.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               3637 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               3 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               176 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               35 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $tmp
[       Urbi.Bind       ]               Linking $tmp to its declaration
[       Urbi.Bind       ]               Linking $tmp to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Bind slotName
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Bind quote_n
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind max
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking owner to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind min
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking owner to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind val
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking owner to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind hook
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind max
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking owner to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind min
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking owner to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking quote_n to its declaration
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking hook to its declaration
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Bind rangeminHook
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind min
[       Urbi.Bind       ]                 Linking slot to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind rangemaxHook
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind max
[       Urbi.Bind       ]                 Linking slot to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking val to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind $switch
[       Urbi.Bind       ]               Linking prop to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking rangeminHook to its declaration
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking rangemaxHook to its declaration
[       Urbi.Bind       ]               Linking owner to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind i
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Bind $save
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking $save to its declaration
[       Urbi.Bind       ]               Linking i to its declaration
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 436
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 437
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 438
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 439
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 440
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 441
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 442
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 443
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 444
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Float
[      Urbi.Stack       ]             Call Orderable
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 445
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 446
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 447
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 448
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 449
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 450
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 451
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 452
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 453
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 454
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 455
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 456
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 457
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 458
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 459
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 460
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/group.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\group.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\group.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\group.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\group.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2112 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind results
[       Urbi.Bind       ]               Bind action
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking results to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking action to its declaration
[       Urbi.Bind       ]               Linking results to its declaration
[       Urbi.Bind       ]               Linking results to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking s to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 461
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 462
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 463
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 464
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 465
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 466
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 467
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 468
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 469
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 470
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 471
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 472
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 473
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 474
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 475
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 476
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call each|
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call copySlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call copySlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call copySlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call copySlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 477
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 478
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EBE8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/kernel1.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\kernel1.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\kernel1.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\kernel1.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\kernel1.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2190 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking suggestion to its declaration
[       Urbi.Bind       ]               Linking what to its declaration
[       Urbi.Bind       ]               Linking what to its declaration
[       Urbi.Bind       ]               Linking suggestion to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking s to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 479
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 480
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 481
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 482
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 483
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call Singleton
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 484
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 485
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 486
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 487
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 488
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 489
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 490
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 491
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 492
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 493
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 494
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 495
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 496
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call each|
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 497
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/job.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\job.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\job.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\job.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\job.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               910 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind t
[       Urbi.Bind       ]               Linking t to its declaration
[       Urbi.Bind       ]               Bind ts
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind b
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 498
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 499
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 500
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 501
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Job
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Traceable
[      Urbi.Stack       ]             Call addProto
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 502
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 503
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 504
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (00650028).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/lobby.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\lobby.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lobby.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lobby.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\lobby.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               201 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking deep to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Linking msg to its declaration
[       Urbi.Bind       ]               Linking prefix to its declaration
[       Urbi.Bind       ]               Linking tag to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking line to its declaration
[       Urbi.Bind       ]                 Linking tag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking prefix to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking lines to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking displayBanner to its declaration
[       Urbi.Bind       ]               Linking isGhost to its declaration
[       Urbi.Bind       ]               Linking displayBanner to its declaration
[       Urbi.Bind       ]               Linking isGhost to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking msg to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking tag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking host to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking host to its declaration
[       Urbi.Bind       ]               Linking port to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 505
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 506
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 507
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 508
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 509
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 510
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 511
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 512
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Lobby
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 513
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Lobby
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 514
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 515
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 516
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 517
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 518
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 519
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 520
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 521
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 522
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 523
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 524
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 525
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 526
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 527
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 528
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 529
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/math.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\math.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\math.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\math.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\math.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1400 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking y to its declaration
[       Urbi.Bind       ]               Linking x to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 530
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 531
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 532
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 533
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 534
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 535
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 536
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call Singleton
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 537
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 538
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 539
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 540
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 541
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 542
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 543
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 544
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 545
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 546
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 547
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 548
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 549
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 550
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 551
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 552
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 553
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 554
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 555
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 556
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call each
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call Float
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 557
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call Float
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 558
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call Float
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 559
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Math
[      Urbi.Stack       ]             Call addProto
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 560
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EBE8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/mutex.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\mutex.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\mutex.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\mutex.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\mutex.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2166 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind l
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind l
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind acquired
[       Urbi.Bind       ]                 Linking acquired to its declaration
[       Urbi.Bind       ]                 Linking acquired to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking mtx to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 561
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 562
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 563
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 564
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 565
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 566
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 567
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Tag
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 568
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Mutex
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 569
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 570
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 571
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 572
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 573
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 574
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 575
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Mutex
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call Semaphore
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 576
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call NotMutex
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 577
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 578
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 579
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 580
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 581
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 582
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 583
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/package-info.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\package-info.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1720 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking deep to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 584
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 585
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 586
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 587
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 588
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call load
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call false
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call searchFile
[     Libport.Path      ]                 exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\package-info\urbi.u
[     Libport.Path      ]                 exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\urbi.u
[      Urbi.Stack       ]               Call loadFile
[      Urbi.Stack       ]                 Call asString
[      Urbi.Stack       ]                 Call addSystemFile
[      Urbi.Stack       ]                 Call loadFile$old
[         Urbi          ]                   Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\urbi.u
[     Libport.Path      ]                     exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\urbi.u
[     Urbi.Scanner      ]                     LexerInput (max size = 8192)
[     Urbi.Scanner      ]                       1449 bytes
[     Urbi.Scanner      ]                     LexerInput (max size = 8192)
[     Urbi.Scanner      ]                       0 bytes
[      Urbi.Stack       ]                     Call System
[      Urbi.Stack       ]                     Call PackageInfo
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                               Call each
[      Urbi.Stack       ]                                 Call f
[      Urbi.Stack       ]                                   Call eval
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call acceptVoid
[      Urbi.Stack       ]                                     Call updateSlot
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call unacceptVoid
[      Urbi.Stack       ]                                 Call <<
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call createSlot
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                               Call each
[      Urbi.Stack       ]                                 Call f
[      Urbi.Stack       ]                                   Call eval
[      Urbi.Stack       ]                                     Call code
[      Urbi.Stack       ]                                     Call acceptVoid
[      Urbi.Stack       ]                                     Call updateSlot
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call unacceptVoid
[      Urbi.Stack       ]                                 Call <<
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call System
[      Urbi.Stack       ]                           Call PackageInfo
[      Urbi.Stack       ]                           Call components
[      Urbi.Stack       ]                           Call []=
[      Urbi.Stack       ]                             Call set
[      Urbi.Stack       ]                               Call hash
[      Urbi.Stack       ]                               Call hash
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 589
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 590
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 591
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 592
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 593
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 594
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 595
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 596
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 597
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 598
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 599
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 600
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]               Call acceptVoid
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call true
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call unacceptVoid
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 601
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call load
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call false
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]               Call searchFile
[     Libport.Path      ]                 exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\package-info\libport.u
[     Libport.Path      ]                 exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\libport.u
[      Urbi.Stack       ]               Call loadFile
[      Urbi.Stack       ]                 Call asString
[      Urbi.Stack       ]                 Call addSystemFile
[      Urbi.Stack       ]                 Call loadFile$old
[         Urbi          ]                   Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\libport.u
[     Libport.Path      ]                     exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\package-info\libport.u
[     Urbi.Scanner      ]                     LexerInput (max size = 8192)
[     Urbi.Scanner      ]                       1504 bytes
[     Urbi.Scanner      ]                     LexerInput (max size = 8192)
[     Urbi.Scanner      ]                       0 bytes
[      Urbi.Stack       ]                     Call System
[      Urbi.Stack       ]                     Call PackageInfo
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                               Call each
[      Urbi.Stack       ]                                 Call f
[      Urbi.Stack       ]                                   Call eval
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call acceptVoid
[      Urbi.Stack       ]                                     Call updateSlot
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call unacceptVoid
[      Urbi.Stack       ]                                 Call <<
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call createSlot
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                               Call each
[      Urbi.Stack       ]                                 Call f
[      Urbi.Stack       ]                                   Call eval
[      Urbi.Stack       ]                                     Call code
[      Urbi.Stack       ]                                     Call acceptVoid
[      Urbi.Stack       ]                                     Call updateSlot
[      Urbi.Stack       ]                                     Call getSlot
[      Urbi.Stack       ]                                     Call unacceptVoid
[      Urbi.Stack       ]                                 Call <<
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call setSlot
[      Urbi.Stack       ]                           Call System
[      Urbi.Stack       ]                           Call PackageInfo
[      Urbi.Stack       ]                           Call components
[      Urbi.Stack       ]                           Call []=
[      Urbi.Stack       ]                             Call set
[      Urbi.Stack       ]                               Call hash
[      Urbi.Stack       ]                               Call hash
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 602
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 603
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 604
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 605
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 606
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 607
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 608
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 609
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 610
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 611
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 612
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[         Sched         ]                     Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                     Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 613
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                     job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]               Call acceptVoid
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call true
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call unacceptVoid
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 614
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call PackageInfo
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 615
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 616
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call components
[      Urbi.Stack       ]             Call []
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]             Call components
[      Urbi.Stack       ]             Call []
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]             Call depend
[      Urbi.Stack       ]               Call dependencies
[      Urbi.Stack       ]               Call +=
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 617
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call components
[      Urbi.Stack       ]             Call components
[      Urbi.Stack       ]             Call []
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call hash
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]             Call []=
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 618
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/pattern.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\pattern.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pattern.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pattern.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pattern.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1235 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking p to its declaration
[       Urbi.Bind       ]               Linking g to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking value to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 619
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 620
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 621
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 622
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 623
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 624
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 625
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 626
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 627
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 628
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 629
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 630
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 631
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 632
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 633
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 634
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EFA8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/profile.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\profile.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\profile.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\profile.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\profile.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               3249 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               17 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               20 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               83 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind max
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking values to its declaration
[       Urbi.Bind       ]               Bind order
[       Urbi.Bind       ]               Bind $loopBreakTag
[       Urbi.Bind       ]               Linking $loopBreakTag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking order to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $loopBreakTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind unit
[       Urbi.Bind       ]               Bind $switch
[       Urbi.Bind       ]               Linking order to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking order to its declaration
[       Urbi.Bind       ]               Linking unit to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind timeUnit
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind selfTimePerUnit
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind totalTime
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Bind wallClockTime
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Bind str
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Linking totalTime to its declaration
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Linking wallClockTime to its declaration
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Linking timeUnit to its declaration
[       Urbi.Bind       ]               Linking selfTimePerUnit to its declaration
[       Urbi.Bind       ]               Linking str to its declaration
[       Urbi.Bind       ]               Linking str to its declaration
[       Urbi.Bind       ]               Bind cumulative
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind selfTime
[       Urbi.Bind       ]                 Linking timeUnit to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Bind selfTimePer
[       Urbi.Bind       ]                 Linking selfTimePerUnit to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking totalTime to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking selfTime to its declaration
[       Urbi.Bind       ]                 Linking selfTime to its declaration
[       Urbi.Bind       ]                 Linking cumulative to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking cumulative to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking selfTime to its declaration
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking selfTimePer to its declaration
[       Urbi.Bind       ]                 Linking str to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking str to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking str to its declaration
[       Urbi.Bind       ]               Linking str to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 635
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 636
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 637
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 638
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 639
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 640
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Profile
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 641
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 642
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 643
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call FunctionProfile
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 644
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (00650028).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/pubsub.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\pubsub.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pubsub.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pubsub.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\pubsub.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1446 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking ev to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind ev
[       Urbi.Bind       ]               Linking ev to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind evs
[       Urbi.Bind       ]               Linking evs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind sub
[       Urbi.Bind       ]               Linking sub to its declaration
[       Urbi.Bind       ]               Linking sub to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking sub to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking ev to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking sub to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking ev to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 645
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 646
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 647
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 648
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 649
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 650
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 651
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 652
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 653
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 654
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 655
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 656
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 657
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/socket.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\socket.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\socket.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\socket.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\socket.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               287 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]         Call protos
[      Urbi.Stack       ]         Call front
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 658
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EBE8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/stack-frame.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\stack-frame.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\stack-frame.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\stack-frame.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\stack-frame.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               722 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 659
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 660
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 661
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 662
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 663
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 664
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 665
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 666
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 667
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E8E8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/string.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\string.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\string.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\string.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\string.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2736 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind lcm
[       Urbi.Bind       ]               Bind min
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind d
[       Urbi.Bind       ]                 Linking n to its declaration
[       Urbi.Bind       ]                 Linking lcm to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking d to its declaration
[       Urbi.Bind       ]                 Linking d to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking n to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking set to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking min to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking list to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking list to its declaration
[       Urbi.Bind       ]               Linking list to its declaration
[       Urbi.Bind       ]               Linking list to its declaration
[       Urbi.Bind       ]               Bind chunks
[       Urbi.Bind       ]               Linking chunks to its declaration
[       Urbi.Bind       ]               Linking list to its declaration
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking el to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking list to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking list to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking chunks to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 668
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 669
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 670
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call Platform
[      Urbi.Stack       ]             Call compilationModeSpace
[      Urbi.Stack       ]             Call !
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]               Call load
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                 Call searchFile
[     Libport.Path      ]                   exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\formatter.u
[     Libport.Path      ]                   exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\formatter.u
[      Urbi.Stack       ]                 Call loadFile
[      Urbi.Stack       ]                   Call asString
[      Urbi.Stack       ]                   Call addSystemFile
[      Urbi.Stack       ]                   Call loadFile$old
[         Urbi          ]                     Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\formatter.u
[     Libport.Path      ]                       exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\formatter.u
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         505 bytes
[     Urbi.Scanner      ]                       LexerInput (max size = 8192)
[     Urbi.Scanner      ]                         0 bytes
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Pop
[       Urbi.Bind       ]                       Push
[       Urbi.Bind       ]                         Pop
[      Urbi.Stack       ]                       Call requireFile
[      Urbi.Stack       ]                         Call defaultIsSystem
[      Urbi.Stack       ]                         Call $loadedFiles
[      Urbi.Stack       ]                         Call has
[      Urbi.Stack       ]                           Call hash
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                           Call ==
[      Urbi.Stack       ]                         Call $requireWait
[      Urbi.Stack       ]                         Call void
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 671
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call Formatter
[      Urbi.Stack       ]                       Call setSlot
[         Sched         ]                       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 672
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                       job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                       Call setSlot
[      Urbi.Stack       ]                 Call acceptVoid
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call true
[      Urbi.Stack       ]                 Call set
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call unacceptVoid
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 673
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 674
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 675
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 676
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 677
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 678
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call String
[      Urbi.Stack       ]             Call Orderable
[      Urbi.Stack       ]             Call Comparable
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call setProtos
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call protos
[      Urbi.Stack       ]               Call clear
[      Urbi.Stack       ]               Call reverse
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call apply
[      Urbi.Stack       ]                     Call apply
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 679
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 680
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 681
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 682
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call hasSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 683
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (00650028).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/tag.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\tag.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tag.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tag.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tag.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1024 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking time_out to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 684
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 685
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 686
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 687
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 688
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Tag
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 689
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 690
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 691
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 692
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 693
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 694
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Tag
[      Urbi.Stack       ]             Call tags
[      Urbi.Stack       ]             Call addProto
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 695
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064EC48).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/timeout.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\timeout.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\timeout.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\timeout.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\timeout.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1465 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               125 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               21 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking thrower_ to its declaration
[       Urbi.Bind       ]               Linking time_ to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $tag
[       Urbi.Bind       ]               Linking $tag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking $tag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking $tag to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 696
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 697
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 698
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 699
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 700
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 701
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 702
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 703
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 704
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 705
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 706
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Tag
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 707
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Timeout
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 708
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 709
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 710
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 711
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 712
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/trajectory-generator.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\trajectory-generator.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\trajectory-generator.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\trajectory-generator.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\trajectory-generator.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               107 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               105 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               1476 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Bind adaptive
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking adaptive to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking adaptive to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking speed to its declaration
[       Urbi.Bind       ]               Linking speed to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Bind $switch
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $switch to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind deadline
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Linking deadline to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking first to its declaration
[       Urbi.Bind       ]               Linking second to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind time
[       Urbi.Bind       ]               Linking time to its declaration
[       Urbi.Bind       ]               Bind d
[       Urbi.Bind       ]               Linking time to its declaration
[       Urbi.Bind       ]               Linking d to its declaration
[       Urbi.Bind       ]               Linking d to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind time
[       Urbi.Bind       ]               Linking time to its declaration
[       Urbi.Bind       ]               Bind stat
[       Urbi.Bind       ]               Linking time to its declaration
[       Urbi.Bind       ]               Linking stat to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind timeElapsed
[       Urbi.Bind       ]               Linking timeElapsed to its declaration
[       Urbi.Bind       ]               Bind stat
[       Urbi.Bind       ]               Linking timeElapsed to its declaration
[       Urbi.Bind       ]               Linking stat to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind currentVal
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind timeLeft
[       Urbi.Bind       ]               Linking timeLeft to its declaration
[       Urbi.Bind       ]               Bind stat
[       Urbi.Bind       ]               Linking timeLeft to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Linking stat to its declaration
[       Urbi.Bind       ]               Linking currentVal to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 713
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 714
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 715
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 716
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 717
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 718
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 719
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 720
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 721
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 722
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 723
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 724
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call pi
[      Urbi.Stack       ]             Call /
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 725
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 726
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 727
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 728
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 729
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 730
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 731
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 732
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 733
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 734
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 735
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 736
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 737
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 738
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call OpenLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 739
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 740
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 741
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call OpenLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 742
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 743
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call OpenLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 744
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 745
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call OpenLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 746
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 747
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 748
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 749
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 750
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 751
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 752
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 753
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 754
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call ClosedLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 755
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 756
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 757
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call TrajectoryGenerator
[      Urbi.Stack       ]             Call ClosedLoop
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 758
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 759
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 760
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 761
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E888).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/tuple.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\tuple.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tuple.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tuple.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\tuple.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               2809 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking m to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking other to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking rhs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking rhs to its declaration
[       Urbi.Bind       ]                 Linking lhs to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking rhs to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking handler to its declaration
[       Urbi.Bind       ]               Linking pattern to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Bind makeTupleClass
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind names
[       Urbi.Bind       ]               Bind Res
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking size to its declaration
[       Urbi.Bind       ]               Linking size to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking size to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking size to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind m
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking size to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Linking m to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind n
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking n to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking n to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking val to its declaration
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Bind $save
[       Urbi.Bind       ]                 Linking $save to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking size to its declaration
[       Urbi.Bind       ]               Linking names to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking Res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Linking makeTupleClass to its declaration
[       Urbi.Bind       ]             Linking makeTupleClass to its declaration
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 762
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 763
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 764
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 765
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 766
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 767
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 768
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 769
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 770
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 771
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 772
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 773
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 774
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call RangeIterable
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Container
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setProtos
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call protos
[      Urbi.Stack       ]                 Call clear
[      Urbi.Stack       ]                 Call reverse
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call apply
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 775
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 776
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 777
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 778
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 779
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 780
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 781
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 782
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 783
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 784
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 785
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 786
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 787
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call makeTupleClass
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 788
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call Tuple
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 789
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call *
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 790
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 791
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 792
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 793
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call range
[      Urbi.Stack       ]                 Call nil
[      Urbi.Stack       ]                 Call isNil
[      Urbi.Stack       ]                   Call nil
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                 Call true
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                 Call <<
[      Urbi.Stack       ]                 Call ++
[      Urbi.Stack       ]                   Call +=
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                 Call <<
[      Urbi.Stack       ]                 Call ++
[      Urbi.Stack       ]                   Call +=
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call idx
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 794
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 795
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setProperty
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 796
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call ++
[      Urbi.Stack       ]                     Call +=
[      Urbi.Stack       ]                       Call +
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 797
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call idx
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 798
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 799
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setProperty
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 800
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call ++
[      Urbi.Stack       ]                     Call +=
[      Urbi.Stack       ]                       Call +
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 801
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Global
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 802
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call makeTupleClass
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 803
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call Tuple
[      Urbi.Stack       ]               Call class
[      Urbi.Stack       ]                 Call Object
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call setProtos
[      Urbi.Stack       ]                   Call Object
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call protos
[      Urbi.Stack       ]                   Call clear
[      Urbi.Stack       ]                   Call reverse
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call apply
[      Urbi.Stack       ]                         Call apply
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 804
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call *
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 805
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 806
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 807
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 808
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call range
[      Urbi.Stack       ]                 Call nil
[      Urbi.Stack       ]                 Call isNil
[      Urbi.Stack       ]                   Call nil
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                 Call true
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                 Call <<
[      Urbi.Stack       ]                 Call ++
[      Urbi.Stack       ]                   Call +=
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                 Call <<
[      Urbi.Stack       ]                 Call ++
[      Urbi.Stack       ]                   Call +=
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                 Call <<
[      Urbi.Stack       ]                 Call ++
[      Urbi.Stack       ]                   Call +=
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                 Call <
[      Urbi.Stack       ]               Call each
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call idx
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 809
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 810
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setProperty
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 811
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call ++
[      Urbi.Stack       ]                     Call +=
[      Urbi.Stack       ]                       Call +
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 812
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call idx
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 813
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 814
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setProperty
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 815
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call ++
[      Urbi.Stack       ]                     Call +=
[      Urbi.Stack       ]                       Call +
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]                 Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                 Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 816
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                 job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call idx
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 817
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setSlot
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 818
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call setProperty
[         Sched         ]                   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]                   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 819
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]                   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call idx
[      Urbi.Stack       ]                   Call ++
[      Urbi.Stack       ]                     Call +=
[      Urbi.Stack       ]                       Call +
[      Urbi.Stack       ]                   Call updateSlot
[         Sched         ]               Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]               Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 820
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]               job Job(shell) root job state: running resumed
[      Urbi.Stack       ]               Call Global
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 821
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E8E8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/weak-pointer.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\weak-pointer.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\weak-pointer.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\weak-pointer.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\weak-pointer.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               377 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 822
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064FFC8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/require-file.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\require-file.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\require-file.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\require-file.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\require-file.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               779 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking file to its declaration
[       Urbi.Bind       ]               Bind tag
[       Urbi.Bind       ]               Linking tag to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking file to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking tag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 823
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E948).
[      Urbi.Shell       ]   shell: command: "Initializing uobjects NOW";
[      Urbi.Stack       ]   Call <<
[      Urbi.Stack       ]     Call enabled
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 824
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (0064E8E8).
[      Urbi.Shell       ]   shell: command: requireFile("urbi/uobject.u");
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\uobject.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\uobject.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\uobject.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\uobject.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               24 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               24 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               10 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               348 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               23 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               23 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               23 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               32 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               23 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               4096 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               3736 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               23 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               92 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               194 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Bind ret
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking ret to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking ret to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking ret to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind name
[       Urbi.Bind       ]               Bind remote
[       Urbi.Bind       ]               Bind lob
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking f to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking remote to its declaration
[       Urbi.Bind       ]               Linking lob to its declaration
[       Urbi.Bind       ]               Bind chan
[       Urbi.Bind       ]               Linking lob to its declaration
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $payload to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind obj
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind obj
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking tagName to its declaration
[       Urbi.Bind       ]               Linking tagName to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Bind tag
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking tag to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking func to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking interval to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking tagName to its declaration
[       Urbi.Bind       ]               Linking tag to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind v
[       Urbi.Bind       ]               Linking tagName to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking tagName to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Bind slotName
[       Urbi.Bind       ]               Linking hubname to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking interval to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking func to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking interval to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind fullname
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind cnt
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking cnt to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking count to its declaration
[       Urbi.Bind       ]               Linking cnt to its declaration
[       Urbi.Bind       ]               Linking cnt to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking cnt to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking cnt to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind b
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking val to its declaration
[       Urbi.Bind       ]               Linking b to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking exp to its declaration
[       Urbi.Bind       ]               Linking tag to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking tag to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking targetObj to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking targetObj to its declaration
[       Urbi.Bind       ]               Linking targetObj to its declaration
[       Urbi.Bind       ]               Linking targetObj to its declaration
[       Urbi.Bind       ]               Linking targetObj to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Bind slotName
[       Urbi.Bind       ]               Linking name to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind min
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind max
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind r
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking r to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking slotName to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind min
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind max
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking value to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking max to its declaration
[       Urbi.Bind       ]                 Linking min to its declaration
[       Urbi.Bind       ]                 Linking parent to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Linking parent to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $pattern
[       Urbi.Bind       ]                 Linking $pattern to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind lobbies
[       Urbi.Bind       ]                 Bind fullname
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind obj
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind o
[       Urbi.Bind       ]                   Linking s to its declaration
[       Urbi.Bind       ]                   Bind $t
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   Linking lobbies to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   Linking lobbies to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking lobbies to its declaration
[       Urbi.Bind       ]                 Linking lobbies to its declaration
[       Urbi.Bind       ]                 Bind chan
[       Urbi.Bind       ]                 Bind msg
[       Urbi.Bind       ]                 Linking fullname to its declaration
[       Urbi.Bind       ]                 Bind tv
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 Linking name to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind $loopContinueTag
[       Urbi.Bind       ]                   Linking $loopContinueTag to its declaration
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   Linking chan to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking msg to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking chan to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   Linking $loopContinueTag to its declaration
[       Urbi.Bind       ]                   Bind currentBindings
[       Urbi.Bind       ]                   Linking fullname to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   Linking currentBindings to its declaration
[       Urbi.Bind       ]                   Linking currentBindings to its declaration
[       Urbi.Bind       ]                   Linking tv to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking name to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking lobbies to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind uv
[       Urbi.Bind       ]               Linking uv to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking compatF to its declaration
[       Urbi.Bind       ]               Linking fnName to its declaration
[       Urbi.Bind       ]               Linking fnName to its declaration
[       Urbi.Bind       ]               Linking compatF to its declaration
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking compatF to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking compatF to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $tmp
[       Urbi.Bind       ]               Bind $save
[       Urbi.Bind       ]               Linking $tmp to its declaration
[       Urbi.Bind       ]               Linking $tmp to its declaration
[       Urbi.Bind       ]               Linking $tmp to its declaration
[       Urbi.Bind       ]               Linking $save to its declaration
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking compatF to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind t
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind $pattern
[       Urbi.Bind       ]                   Linking $pattern to its declaration
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking t to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking target to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking source to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind base
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking base to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking base to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking n to its declaration
[       Urbi.Bind       ]               Linking base to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Linking to to its declaration
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind uvar
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Bind uob
[       Urbi.Bind       ]               Linking uvar to its declaration
[       Urbi.Bind       ]               Linking uvar to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Linking uob to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking uob to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Linking uob to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind src
[       Urbi.Bind       ]               Linking src to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking from to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Bind o
[       Urbi.Bind       ]                 Linking i to its declaration
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind $t
[       Urbi.Bind       ]                   Linking j to its declaration
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Linking j to its declaration
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Linking j to its declaration
[       Urbi.Bind       ]                   Linking o to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking res to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking res to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking s to its declaration
[       Urbi.Bind       ]                 Linking s to its declaration
[       Urbi.Bind       ]                 Linking objname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking objname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind chan
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Bind cloner
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind u
[       Urbi.Bind       ]                 Linking u to its declaration
[       Urbi.Bind       ]                 Linking objname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind $t
[       Urbi.Bind       ]                   Linking u to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Linking u to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $t to its declaration
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Bind ret
[       Urbi.Bind       ]                 Linking u to its declaration
[       Urbi.Bind       ]                 Linking ret to its declaration
[       Urbi.Bind       ]                 Linking ret to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking cloner to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking src to its declaration
[       Urbi.Bind       ]               Linking dst to its declaration
[       Urbi.Bind       ]               Linking dst to its declaration
[       Urbi.Bind       ]               Linking src to its declaration
[       Urbi.Bind       ]               Linking onfail to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind rrtp
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind port
[       Urbi.Bind       ]               Linking rrtp to its declaration
[       Urbi.Bind       ]               Bind host
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind lrtp
[       Urbi.Bind       ]               Linking host to its declaration
[       Urbi.Bind       ]               Linking port to its declaration
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Bind l
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind t
[       Urbi.Bind       ]                 Linking t to its declaration
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Bind $pattern
[       Urbi.Bind       ]                   Linking l to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking $payload to its declaration
[       Urbi.Bind       ]                   Linking $pattern to its declaration
[       Urbi.Bind       ]                   Linking $pattern to its declaration
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking lrtp to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking t to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Linking rrtp to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $returnTag
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind fullname
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind currentCount
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking currentCount to its declaration
[       Urbi.Bind       ]               Linking currentCount to its declaration
[       Urbi.Bind       ]               Linking $returnTag to its declaration
[       Urbi.Bind       ]               Bind obj
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Bind v
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Bind props
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking v to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking varname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking p to its declaration
[       Urbi.Bind       ]                 Linking p to its declaration
[       Urbi.Bind       ]                 Linking obj to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking props to its declaration
[       Urbi.Bind       ]               Bind tv
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking tv to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking tv to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking objname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking varname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking fr to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking fr to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind fullname
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind obj
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking isbin to its declaration
[       Urbi.Bind       ]               Bind $value
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $value to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind lrtp
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind rrtp
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking $value to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking rrtp to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking rrtp to its declaration
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking lrtp to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking rrtp to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking objname to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking varname to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking fr to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking lobby to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind $value
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $value to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind lrtp
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Bind rrtp
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking $value to its declaration
[       Urbi.Bind       ]               Linking lrtp to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Linking rrtp to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking lrtp to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking rrtp to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking objname to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking varname to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking fr to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking lobby to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Bind e
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking e to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking lobby to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind uob
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind chan
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Bind fullname
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking uob to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Bind f
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $returnTag
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking fullname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $returnTag to its declaration
[       Urbi.Bind       ]                 Bind uvar
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking varname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking uob to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Bind v
[       Urbi.Bind       ]                 Linking uvar to its declaration
[       Urbi.Bind       ]                 Linking uvar to its declaration
[       Urbi.Bind       ]                 Linking uvar to its declaration
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking fullname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking v to its declaration
[       Urbi.Bind       ]                 Linking varname to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking uob to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind o
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking fr to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking fr to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking fr to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Bind iportname
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking iportname to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking iportname to its declaration
[       Urbi.Bind       ]               Linking iportname to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking iportname to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking iportname to its declaration
[       Urbi.Bind       ]               Linking o to its declaration
[       Urbi.Bind       ]               Linking varname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind functionName
[       Urbi.Bind       ]               Linking fname to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind chan
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Linking functionName to its declaration
[       Urbi.Bind       ]               Linking chan to its declaration
[       Urbi.Bind       ]               Bind f
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Push
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking i to its declaration
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Linking args to its declaration
[       Urbi.Bind       ]                   It's captured
[       Urbi.Bind       ]                   Pop
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking nargs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking nargs to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind u
[       Urbi.Bind       ]                 Linking u to its declaration
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking args to its declaration
[       Urbi.Bind       ]                 Linking functionName to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking u to its declaration
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Bind res
[       Urbi.Bind       ]                 Linking u to its declaration
[       Urbi.Bind       ]                 Linking chan to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking fname to its declaration
[       Urbi.Bind       ]               Linking f to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking starting to its declaration
[       Urbi.Bind       ]               Linking evname to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind obj
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind fullname
[       Urbi.Bind       ]               Linking nargs to its declaration
[       Urbi.Bind       ]               Linking ename to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind key
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking key to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking key to its declaration
[       Urbi.Bind       ]               Linking obj to its declaration
[       Urbi.Bind       ]               Linking ename to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking ename to its declaration
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Bind args
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking nargs to its declaration
[       Urbi.Bind       ]               Bind varargs
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking nargs to its declaration
[       Urbi.Bind       ]               Bind code
[       Urbi.Bind       ]               Linking objname to its declaration
[       Urbi.Bind       ]               Linking ename to its declaration
[       Urbi.Bind       ]               Linking varargs to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking fullname to its declaration
[       Urbi.Bind       ]               Linking args to its declaration
[       Urbi.Bind       ]               Linking code to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind $pattern
[       Urbi.Bind       ]               Linking $payload to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind l
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Bind $t
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Linking $t to its declaration
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Linking o to its declaration
[       Urbi.Bind       ]                 Linking l to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking b to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind l
[       Urbi.Bind       ]               Linking $pattern to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking c to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Bind names
[       Urbi.Bind       ]               Bind $t
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Linking $t to its declaration
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking s to its declaration
[       Urbi.Bind       ]                 Linking s to its declaration
[       Urbi.Bind       ]                 Linking s to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking names to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Linking x to its declaration
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Pop
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Push
[       Urbi.Bind       ]                 Bind k
[       Urbi.Bind       ]                 Linking e to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking k to its declaration
[       Urbi.Bind       ]                 Linking e to its declaration
[       Urbi.Bind       ]                 Linking res to its declaration
[       Urbi.Bind       ]                 It's captured
[       Urbi.Bind       ]                 Pop
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Finalizable
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 825
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call UObject
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 826
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 827
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 828
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call period
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 829
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 830
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 831
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 832
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 833
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 834
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 835
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 836
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 837
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 838
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 839
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 840
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call bounceSetUpdate
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call onEvent
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 841
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 842
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 843
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 844
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 845
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 846
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 847
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 848
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 849
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 850
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 851
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 852
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call createSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 853
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 854
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 855
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 856
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 857
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 858
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 859
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 860
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UObject
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 861
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 862
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Tag
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 863
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Event
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 864
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call getenv
[      Urbi.Stack       ]             Call !
[      Urbi.Stack       ]               Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 865
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 866
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call removeLocalSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 867
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 868
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 869
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 870
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 871
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 872
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 873
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 874
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 875
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 876
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 877
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UConnection
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 878
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 879
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 880
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 881
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 882
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 883
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 884
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 885
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 886
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 887
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UValue
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 888
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 889
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 890
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 891
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 892
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 893
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call uobjects
[      Urbi.Stack       ]             Call uobjectInit
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 894
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call uobjects
[      Urbi.Stack       ]             Call addProto
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 895
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UVar
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]                 Call __clone
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                               Call Global
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call nonInterruptible
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call Global
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                     Call updateHook
[      Urbi.Stack       ]                   Call ownerName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call initialName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call Tag
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call createSlot
[      Urbi.Stack       ]                   Call fullName
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call code
[      Urbi.Stack       ]                                     Call fullName
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call !
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call tag
[      Urbi.Stack       ]                   Call getProperty
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call onEvent
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 896
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call updateSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 897
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]               Call updateHook
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 898
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call notifyChangeOwned
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call backwards
[      Urbi.Stack       ]                 Call isNil
[      Urbi.Stack       ]                   Call nil
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call notifyChangeOwned_
[       Urbi.UVar       ]                 Registered changeOwned with id 1 on 031A7880 
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 899
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UVar
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]                 Call __clone
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                               Call Global
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call nonInterruptible
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call Global
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                     Call updateHook
[      Urbi.Stack       ]                   Call ownerName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call initialName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call Tag
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call createSlot
[      Urbi.Stack       ]                   Call fullName
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call code
[      Urbi.Stack       ]                                     Call fullName
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call !
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call tag
[      Urbi.Stack       ]                   Call getProperty
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call onEvent
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 900
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call notifyAccess
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call ++
[      Urbi.Stack       ]                 Call +=
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call onHasNotifyAccess
[      Urbi.Stack       ]               Call emit
[      Urbi.Stack       ]               Call backwards
[      Urbi.Stack       ]                 Call isNil
[      Urbi.Stack       ]                   Call nil
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call notifyAccess_
[       Urbi.UVar       ]                 Loopcheck on currentLobbyId: 0
[      Urbi.Stack       ]                 Call hookChangedEvent
[      Urbi.Stack       ]                   Call Control
[      Urbi.Stack       ]                   Call disown
[      Urbi.Stack       ]                     Call System
[      Urbi.Stack       ]                     Call true
[      Urbi.Stack       ]                     Call spawn
[    Sched.Coroutine    ]                       Create coroutine: 03C471B0.
[       Urbi.UVar       ]                 Registered access with id 2 on 031B6AC0
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Considering Job(shell_4) root job state: to_start in state to_start
[         Sched         ]   Starting job Job(shell_4) root job state: to_start
[         Sched         ]   Job Job(shell_4) root job state: to_start is starting
[    Sched.Coroutine    ]   Start coroutine: 03C471B0.
[         Sched         ] job 006EFC10: run
[      Urbi.Stack       ] Call 
[      Urbi.Stack       ]   Call Tag
[      Urbi.Stack       ]   Call new
[      Urbi.Stack       ]     Call getSlot
[      Urbi.Stack       ]     Call clone
[      Urbi.Stack       ]     Call updateSlot
[      Urbi.Stack       ]     Call callMessage
[      Urbi.Stack       ]       Call evalArgs
[      Urbi.Stack       ]         Call args
[      Urbi.Stack       ]         Call map
[      Urbi.Stack       ]           Call each|
[      Urbi.Stack       ]       Call init
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call hasLocalSlot
[      Urbi.Stack       ]   Call !
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call Event
[      Urbi.Stack       ]   Call new
[      Urbi.Stack       ]     Call getSlot
[      Urbi.Stack       ]     Call clone
[      Urbi.Stack       ]     Call updateSlot
[      Urbi.Stack       ]     Call callMessage
[      Urbi.Stack       ]       Call evalArgs
[      Urbi.Stack       ]         Call args
[      Urbi.Stack       ]         Call map
[      Urbi.Stack       ]           Call each|
[      Urbi.Stack       ]       Call init
[      Urbi.Stack       ]   Call setSlot
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call onSubscribe
[      Urbi.Stack       ]   Call false
[      Urbi.Stack       ]   Call onEvent
[         Sched         ] Job(shell_4) root job state: zombie has terminated (state: zombie)
[    Sched.Coroutine    ] Switch coroutine: 03C471B0 => 0027FC6C.
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 901
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call UVar
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]                 Call __clone
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                               Call Global
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call nonInterruptible
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call Global
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                     Call updateHook
[      Urbi.Stack       ]                   Call ownerName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call initialName
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call Tag
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call createSlot
[      Urbi.Stack       ]                   Call fullName
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call code
[      Urbi.Stack       ]                                     Call fullName
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call setProperty
[      Urbi.Stack       ]                   Call hasLocalSlot
[      Urbi.Stack       ]                   Call !
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call tag
[      Urbi.Stack       ]                   Call getProperty
[      Urbi.Stack       ]                     Call new
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call clone
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call callMessage
[      Urbi.Stack       ]                         Call evalArgs
[      Urbi.Stack       ]                           Call args
[      Urbi.Stack       ]                           Call map
[      Urbi.Stack       ]                             Call each|
[      Urbi.Stack       ]                         Call init
[      Urbi.Stack       ]                   Call false
[      Urbi.Stack       ]                   Call onEvent
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ]   Free coroutine: 03C471B0.
[         Sched         ]   ======================================================== cycle 902
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call notifyAccess
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call ++
[      Urbi.Stack       ]                 Call +=
[      Urbi.Stack       ]                   Call +
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call nAccess
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call backwards
[      Urbi.Stack       ]                 Call isNil
[      Urbi.Stack       ]                   Call nil
[      Urbi.Stack       ]                   Call ===
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call notifyAccess_
[       Urbi.UVar       ]                 Loopcheck on currentRunnerInUObjectUpdate: 0
[      Urbi.Stack       ]                 Call hookChangedEvent
[      Urbi.Stack       ]                   Call Control
[      Urbi.Stack       ]                   Call disown
[      Urbi.Stack       ]                     Call System
[      Urbi.Stack       ]                     Call true
[      Urbi.Stack       ]                     Call spawn
[    Sched.Coroutine    ]                       Create coroutine: 03C46570.
[       Urbi.UVar       ]                 Registered access with id 3 on 031C8670
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Considering Job(shell_6) root job state: to_start in state to_start
[         Sched         ]   Starting job Job(shell_6) root job state: to_start
[         Sched         ]   Job Job(shell_6) root job state: to_start is starting
[    Sched.Coroutine    ]   Start coroutine: 03C46570.
[         Sched         ] job 006EFC10: run
[      Urbi.Stack       ] Call 
[      Urbi.Stack       ]   Call Tag
[      Urbi.Stack       ]   Call new
[      Urbi.Stack       ]     Call getSlot
[      Urbi.Stack       ]     Call clone
[      Urbi.Stack       ]     Call updateSlot
[      Urbi.Stack       ]     Call callMessage
[      Urbi.Stack       ]       Call evalArgs
[      Urbi.Stack       ]         Call args
[      Urbi.Stack       ]         Call map
[      Urbi.Stack       ]           Call each|
[      Urbi.Stack       ]       Call init
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call hasLocalSlot
[      Urbi.Stack       ]   Call !
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call Event
[      Urbi.Stack       ]   Call new
[      Urbi.Stack       ]     Call getSlot
[      Urbi.Stack       ]     Call clone
[      Urbi.Stack       ]     Call updateSlot
[      Urbi.Stack       ]     Call callMessage
[      Urbi.Stack       ]       Call evalArgs
[      Urbi.Stack       ]         Call args
[      Urbi.Stack       ]         Call map
[      Urbi.Stack       ]           Call each|
[      Urbi.Stack       ]       Call init
[      Urbi.Stack       ]   Call setSlot
[      Urbi.Stack       ]   Call changed
[      Urbi.Stack       ]   Call onSubscribe
[      Urbi.Stack       ]   Call false
[      Urbi.Stack       ]   Call onEvent
[         Sched         ] Job(shell_6) root job state: zombie has terminated (state: zombie)
[    Sched.Coroutine    ] Switch coroutine: 03C46570 => 0027FC6C.
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 903
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ]   Free coroutine: 03C46570.
[         Sched         ]   ======================================================== cycle 904
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 905
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 906
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 907
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 908
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 909
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 910
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 911
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 912
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 913
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 914
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 915
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 916
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 917
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 918
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 919
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 920
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 921
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 922
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 923
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 924
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 925
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 926
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Lobby
[      Urbi.Stack       ]             Call onDisconnect
[      Urbi.Stack       ]             Call false
[      Urbi.Stack       ]             Call onEvent
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 927
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call uobjects
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 928
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call uobjects
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 929
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 930
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 931
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 932
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call List
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 933
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Dictionary
[      Urbi.Stack       ]             Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 934
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Object
[      Urbi.Stack       ]             Call class
[      Urbi.Stack       ]               Call Object
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call setSlot
[      Urbi.Stack       ]             Call setConstSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 935
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[       Urbi.Bind       ] Bind $t
[       Urbi.Bind       ] Linking $t to its declaration
[       Urbi.Bind       ] Linking $t to its declaration
[      Urbi.Shell       ] shell: executing command (03D6A270).
[      Urbi.Shell       ]   shell: command: if ({ var '$t' = Platform.enabledModules.has("ros") | if ('$t')
{ System.getenv("ROS_ROOT") }
else
{ '$t' } })
{ loadModule("urbi/ros") }
else
{};
[      Urbi.Stack       ]   Call Platform
[      Urbi.Stack       ]   Call enabledModules
[      Urbi.Stack       ]   Call has
[      Urbi.Stack       ]     Call any
[      Urbi.Stack       ]       Call Tag
[      Urbi.Stack       ]       Call newFlowControl
[      Urbi.Stack       ]         Call new
[      Urbi.Stack       ]           Call getSlot
[      Urbi.Stack       ]           Call clone
[      Urbi.Stack       ]           Call updateSlot
[      Urbi.Stack       ]           Call callMessage
[      Urbi.Stack       ]             Call evalArgs
[      Urbi.Stack       ]               Call args
[      Urbi.Stack       ]               Call map
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call eval
[      Urbi.Stack       ]                         Call getSlot
[      Urbi.Stack       ]                         Call acceptVoid
[      Urbi.Stack       ]                         Call updateSlot
[      Urbi.Stack       ]                         Call getSlot
[      Urbi.Stack       ]                         Call unacceptVoid
[      Urbi.Stack       ]                     Call <<
[      Urbi.Stack       ]             Call init
[      Urbi.Stack       ]       Call each|
[      Urbi.Stack       ]         Call each
[      Urbi.Stack       ]           Call f
[      Urbi.Stack       ]             Call ==
[      Urbi.Stack       ]       Call false
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 936
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (03D69A30).
[      Urbi.Shell       ]   shell: command: if (System.Platform.compilationModeSpace.'!')
{
  requireFile("urbi/formatter.u");
  requireFile("urbi/input-stream.u");
  requireFile("urbi/logger.u");
  requireFile("urbi/process.u");
  requireFile("urbi/regexp.u");
}
else
{};
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call Platform
[      Urbi.Stack       ]   Call compilationModeSpace
[      Urbi.Stack       ]   Call !
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call $requireWait
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 937
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\input-stream.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\input-stream.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\input-stream.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\input-stream.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               542 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Bind l
[       Urbi.Bind       ]               Bind res
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Bind $first
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking $first to its declaration
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Linking l to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Linking res to its declaration
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 938
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call loadLibrary
[     Libport.Xltdl     ]               loading urbi\stream
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\stream.dll): failed with error 126: The specified module could not be found.
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\urbi\stream: fail
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream.dll)
[     Libport.Xltdl     ]                 LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream.dll): success
[     Libport.Xltdl     ]                       success
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\stream: pass
[     Urbi.Version      ]               Stream: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ]               register C++ object Stream
[         Urbi          ]               create primitive close with C++ routine (type: void (__thiscall urbi::object::Stream::*)(void))
[     Urbi.Version      ]               InputStream: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ]               register C++ object InputStream
[         Urbi          ]               create primitive get with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::InputStream::*)(void))
[         Urbi          ]               create primitive getChar with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::InputStream::*)(void))
[         Urbi          ]               create primitive getLine with C++ routine (type: class libport::intrusive_ptr<class urbi::object::Object> (__thiscall urbi::object::InputStream::*)(void))
[         Urbi          ]               create primitive init with C++ routine (type: void (__thiscall urbi::object::InputStream::*)(class libport::intrusive_ptr<class urbi::object::File>))
[     Urbi.Version      ]               OutputStream: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ]               register C++ object OutputStream
[         Urbi          ]               create primitive << with C++ routine (type: class libport::intrusive_ptr<class urbi::object::OutputStream> (__thiscall urbi::object::OutputStream::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ]               create primitive flush with C++ routine (type: void (__thiscall urbi::object::OutputStream::*)(void))
[         Urbi          ]               create primitive init with C++ routine (type: void (__thiscall urbi::object::OutputStream::*)(class libport::intrusive_ptr<class urbi::object::File>))
[         Urbi          ]               create primitive put with C++ routine (type: class libport::intrusive_ptr<class urbi::object::OutputStream> (__thiscall urbi::object::OutputStream::*)(unsigned char))
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 939
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call InputStream
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 940
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\logger.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\logger.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\logger.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               315 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[      Urbi.Stack       ]             Call loadModule
[     Libport.Xltdl     ]               loading urbi\logger
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\logger.dll): failed with error 126: The specified module could not be found.
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\urbi\logger: fail
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger.dll)
[     Libport.Xltdl     ]                 LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger.dll): success
[     Libport.Xltdl     ]                       success
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\logger: pass
[     Urbi.Version      ]               Logger: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ]               register C++ object Logger
[         Urbi          ]               create primitive init with C++ routine (type: void (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               extend primitive init with C++ routine (type: void (__thiscall urbi::object::Logger::*)(class libport::Symbol))
[         Urbi          ]               extend primitive init with C++ routine (type: void (__thiscall urbi::object::Logger::*)(class libport::Symbol,class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ]               create primitive debug with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive debug with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive debug with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive dump with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive dump with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive dump with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive err with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive err with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive err with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive log with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive log with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive log with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive trace with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive trace with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive trace with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive warn with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive warn with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               extend primitive warn with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Logger::*)(void)const)
[         Urbi          ]               create primitive << with C++ routine (type: class urbi::object::Logger * (__thiscall urbi::object::Logger::*)(class libport::intrusive_ptr<class urbi::object::Object>))
[         Urbi          ]               create primitive onEnter with C++ routine (type: void (__thiscall urbi::object::Logger::*)(void))
[         Urbi          ]               create primitive onLeave with C++ routine (type: void (__thiscall urbi::object::Logger::*)(void))
[      Urbi.Stack       ]               Call new
[      Urbi.Stack       ]                 Call getSlot
[      Urbi.Stack       ]                 Call clone
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call callMessage
[      Urbi.Stack       ]                   Call evalArgs
[      Urbi.Stack       ]                     Call args
[      Urbi.Stack       ]                     Call map
[      Urbi.Stack       ]                       Call each|
[      Urbi.Stack       ]                         Call each
[      Urbi.Stack       ]                           Call f
[      Urbi.Stack       ]                             Call eval
[      Urbi.Stack       ]                               Call getSlot
[      Urbi.Stack       ]                               Call acceptVoid
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                               Call getSlot
[      Urbi.Stack       ]                               Call unacceptVoid
[      Urbi.Stack       ]                           Call <<
[      Urbi.Stack       ]                         Call each
[      Urbi.Stack       ]                           Call f
[      Urbi.Stack       ]                             Call eval
[      Urbi.Stack       ]                               Call getSlot
[      Urbi.Stack       ]                               Call acceptVoid
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                               Call getSlot
[      Urbi.Stack       ]                               Call unacceptVoid
[      Urbi.Stack       ]                           Call <<
[      Urbi.Stack       ]                   Call init
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call clone
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call values
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call clone
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call values
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call clone
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call values
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call clone
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call values
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call clone
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call setSlot
[      Urbi.Stack       ]                         Call values
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]         Call protos
[      Urbi.Stack       ]         Call front
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 941
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\process.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\process.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\process.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\process.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               456 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Bind $pattern
[       Urbi.Bind       ]             Bind e
[       Urbi.Bind       ]             Linking $pattern to its declaration
[       Urbi.Bind       ]             Linking e to its declaration
[      Urbi.Stack       ]             Call System
[      Urbi.Stack       ]             Call Platform
[      Urbi.Stack       ]             Call isWindows
[      Urbi.Stack       ]               Call Tag
[      Urbi.Stack       ]               Call newFlowControl
[      Urbi.Stack       ]                 Call new
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call callMessage
[      Urbi.Stack       ]                     Call evalArgs
[      Urbi.Stack       ]                       Call args
[      Urbi.Stack       ]                       Call map
[      Urbi.Stack       ]                         Call each|
[      Urbi.Stack       ]                           Call each
[      Urbi.Stack       ]                             Call f
[      Urbi.Stack       ]                               Call eval
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call acceptVoid
[      Urbi.Stack       ]                                 Call updateSlot
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call unacceptVoid
[      Urbi.Stack       ]                             Call <<
[      Urbi.Stack       ]                     Call init
[      Urbi.Stack       ]               Call hostOs
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call stop
[      Urbi.Stack       ]             Call !
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]         Call protos
[      Urbi.Stack       ]         Call front
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 942
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Stack       ]   Call requireFile
[      Urbi.Stack       ]     Call defaultIsSystem
[      Urbi.Stack       ]     Call $loadedFiles
[      Urbi.Stack       ]     Call has
[      Urbi.Stack       ]       Call hash
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]     Call load
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call false
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.u
[     Libport.Path      ]         exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\regexp.u
[      Urbi.Stack       ]       Call loadFile
[      Urbi.Stack       ]         Call asString
[      Urbi.Stack       ]         Call addSystemFile
[      Urbi.Stack       ]         Call loadFile$old
[         Urbi          ]           Load file: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\regexp.u
[     Libport.Path      ]             exists: true : E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\urbi\regexp.u
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               700 bytes
[     Urbi.Scanner      ]             LexerInput (max size = 8192)
[     Urbi.Scanner      ]               0 bytes
[       Urbi.Bind       ]             Push
[       Urbi.Bind       ]               Pop
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 943
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 944
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 945
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 946
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 947
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call requireFile
[      Urbi.Stack       ]               Call defaultIsSystem
[      Urbi.Stack       ]               Call $loadedFiles
[      Urbi.Stack       ]               Call has
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call ==
[      Urbi.Stack       ]               Call $requireWait
[      Urbi.Stack       ]                 Call $loadedFiles
[      Urbi.Stack       ]                 Call []
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                   Call hash
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call !
[      Urbi.Stack       ]               Call void
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 948
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call loadLibrary
[     Libport.Xltdl     ]               loading urbi\regexp
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp.dll): failed with error 126: The specified module could not be found.
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\urbi\regexp: fail
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp, .la)
[     Libport.Xltdl     ]                 try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp, .dll)
[     Libport.Xltdl     ]                   tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp.dll, (ALL))
[     Libport.Xltdl     ]                     lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp.dll)
[     Libport.Xltdl     ]                       fail: file not found
[     Libport.Xltdl     ]                     lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp.dll)
[     Libport.Xltdl     ]                   LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp.dll)
[     Libport.Xltdl     ]                 LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp.dll): success
[     Libport.Xltdl     ]                       success
[     Libport.Xltdl     ]               loading E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\bin\gostai\uobjects-vc90-d\urbi\regexp: pass
[     Urbi.Version      ]               Regexp: Compiled with Urbi SDK 846b3de, loaded in Urbi SDK 846b3de
[    Urbi.CxxObject     ]               register C++ object Regexp
[         Urbi          ]               create primitive [] with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Regexp::*)(unsigned int))
[         Urbi          ]               create primitive asPrintable with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Regexp::*)(void)const)
[         Urbi          ]               create primitive asString with C++ routine (type: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > (__thiscall urbi::object::Regexp::*)(void)const)
[         Urbi          ]               create primitive init with C++ routine (type: void (__thiscall urbi::object::Regexp::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               create primitive match with C++ routine (type: bool (__thiscall urbi::object::Regexp::*)(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &))
[         Urbi          ]               create primitive matches with C++ routine (type: class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > (__thiscall urbi::object::Regexp::*)(void)const)
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 949
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call Regexp
[      Urbi.Stack       ]             Call protos
[      Urbi.Stack       ]             Call Global
[      Urbi.Stack       ]             Call Container
[      Urbi.Stack       ]             Call insertFront
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 950
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call copySlot
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call setSlot
[         Sched         ]             Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]             Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 951
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]             job Job(shell) root job state: running resumed
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]       Call acceptVoid
[      Urbi.Stack       ]       Call $loadedFiles
[      Urbi.Stack       ]       Call true
[      Urbi.Stack       ]       Call set
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call unacceptVoid
[      Urbi.Stack       ]     Call void
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[         Sched         ]   ======================================================== cycle 952
[         Sched         ]   1 jobs in the queue for this round
[         Sched         ]   Considering Job(shell) root job state: running in state running
[         Sched         ]   will resume job Job(shell) root job state: running
[    Sched.Coroutine    ]   Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (03D69E50).
[      Urbi.Shell       ]   shell: command: Channel.topLevel.enabled = true | System.defaultIsSystem = false | var Object.loaded = true | {};
[      Urbi.Stack       ]   Call Channel
[      Urbi.Stack       ]   Call topLevel
[      Urbi.Stack       ]   Call true
[      Urbi.Stack       ]   Call updateSlot
[      Urbi.Stack       ]   Call System
[      Urbi.Stack       ]   Call false
[      Urbi.Stack       ]   Call updateSlot
[      Urbi.Stack       ]   Call Object
[      Urbi.Stack       ]   Call true
[      Urbi.Stack       ]   Call setSlot
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ]   back from job Job(shell) root job state: running
[         Sched         ]   Scheduler asking to be woken up ASAP
[     Urbi.UServer      ] urbi.u has been processed.
[   Urbi.StreamBuffer   ] posting 65 bytes of data.
[    Sched.Coroutine    ] Create coroutine: 03C440F0.
[         Urbi          ] Spawn new interpreter "FastAsyncJobs".
[    Sched.Coroutine    ] Create coroutine: 03C432F0.
[    Sched.Coroutine    ] Start coroutine: 03C432F0.
[         Sched         ] job 03DC61F8: run
[      Urbi.Stack       ] Call 
[      Urbi.Stack       ]   Call fast
[      Urbi.Stack       ]   Call interactive
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] got ghost connection
[     Urbi.UServer      ] looking for _start.u
[     Libport.Path      ]   exists: true : E:\_Emys\URBI\EX_UTester - Copy\_start.u
[     Urbi.UServer      ]   loading E:\_Emys\URBI\EX_UTester - Copy\_start.u
[   Urbi.StreamBuffer   ]   posting 21 bytes of data.
[   Urbi.StreamBuffer   ]   posting 67 bytes of data.
[   Urbi.StreamBuffer   ]   posting 7 bytes of data.
[         Urbi          ] going to work...
[         Urbi          ] machine: machine: unknown, node: unknown, release: unknown, system: unknown, release_major: 0, release_minor: 0, release_patchlevel: 0
[         Urbi          ] needs_read_stdin: 1
[         Sched         ] ======================================================== cycle 953
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[     Urbi.Scanner      ]   LexerInput (max size = 8192)
[   Urbi.StreamBuffer   ]     requesting new data.
[   Urbi.StreamBuffer   ]       160 bytes available, swapping buffers.
[   Urbi.StreamBuffer   ]       available data: "//#push 88 \"src/kernel/uconnection.cc\"\ninitialize(1, 1)|;\n//#pop\n//#push 1 \"_start.u\"\nloadModule(\"UTester\");\r\n\r\n\r\n\r\n\r\nvar t1 = UTester.new;\r\n\r\nt1.add(2);//#pop\n".
[   Urbi.StreamBuffer   ]       return: 2f.
[     Urbi.Scanner      ]     160 bytes
[      Urbi.Shell       ] shell: executing command (03D6A690).
[      Urbi.Shell       ]   shell: command: initialize(1, 1) | {};
[      Urbi.Stack       ]   Call initialize
[      Urbi.Stack       ]     Call lobby
[      Urbi.Stack       ]     Call !=
[      Urbi.Stack       ]       Call ==
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]     Call banner
[      Urbi.Stack       ]       Call System
[      Urbi.Stack       ]       Call PackageInfo
[      Urbi.Stack       ]       Call components
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call banner
[      Urbi.Stack       ]         Call *
[      Urbi.Stack       ]         Call false
[      Urbi.Stack       ]         Call copyright
[      Urbi.Stack       ]           Call name
[      Urbi.Stack       ]           Call versionRev
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call Formatter
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call %
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]           Call copyrightYears
[      Urbi.Stack       ]           Call copyrightHolder
[      Urbi.Stack       ]           Call copyrightHolder
[      Urbi.Stack       ]           Call copyrightHolder
[      Urbi.Stack       ]           Call size
[      Urbi.Stack       ]           Call -
[      Urbi.Stack       ]           Call []
[      Urbi.Stack       ]           Call ==
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call Formatter
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call %
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]           Call +
[      Urbi.Stack       ]         Call +
[      Urbi.Stack       ]         Call *
[      Urbi.Stack       ]         Call +
[      Urbi.Stack       ]       Call echoEach
[      Urbi.Stack       ]         Call each|
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]           Call each
[      Urbi.Stack       ]             Call echo
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call +
[      Urbi.Stack       ]               Call send
[      Urbi.Stack       ]     Call clog
[      Urbi.Stack       ]     Call maybeLoad
[      Urbi.Stack       ]       Call nil
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\URBI.INI
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\URBI.INI
[      Urbi.Error       ]         raise exception: FileNotFound
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call size
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call !=
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call 
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call Binding
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                         Call Pattern
[      Urbi.Stack       ]                         Call Binding
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call setSlot
[      Urbi.Stack       ]                               Call createSlot
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call code
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call match
[      Urbi.Stack       ]         Call pattern
[      Urbi.Stack       ]         Call matchPattern
[      Urbi.Stack       ]           Call hasSlot
[      Urbi.Stack       ]           Call match
[      Urbi.Stack       ]             Call bindings
[      Urbi.Stack       ]             Call name
[      Urbi.Stack       ]             Call []=
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call isNil
[      Urbi.Stack       ]           Call nil
[      Urbi.Stack       ]           Call ===
[      Urbi.Stack       ]       Call bindings
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call Exception
[      Urbi.Stack       ]       Call FileNotFound
[      Urbi.Stack       ]       Call isA
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]     Call clog
[      Urbi.Stack       ]     Call maybeLoad
[      Urbi.Stack       ]       Call nil
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\global.u
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\global.u
[      Urbi.Error       ]         raise exception: FileNotFound
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call size
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call !=
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call 
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call Binding
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                         Call Pattern
[      Urbi.Stack       ]                         Call Binding
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call setSlot
[      Urbi.Stack       ]                               Call createSlot
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call code
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call match
[      Urbi.Stack       ]         Call pattern
[      Urbi.Stack       ]         Call matchPattern
[      Urbi.Stack       ]           Call hasSlot
[      Urbi.Stack       ]           Call match
[      Urbi.Stack       ]             Call bindings
[      Urbi.Stack       ]             Call name
[      Urbi.Stack       ]             Call []=
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call isNil
[      Urbi.Stack       ]           Call nil
[      Urbi.Stack       ]           Call ===
[      Urbi.Stack       ]       Call bindings
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call Exception
[      Urbi.Stack       ]       Call FileNotFound
[      Urbi.Stack       ]       Call isA
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]     Call clog
[      Urbi.Stack       ]     Call maybeLoad
[      Urbi.Stack       ]       Call nil
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\CLIENT.INI
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\CLIENT.INI
[      Urbi.Error       ]         raise exception: FileNotFound
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call size
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call !=
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call 
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call Binding
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                         Call Pattern
[      Urbi.Stack       ]                         Call Binding
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call setSlot
[      Urbi.Stack       ]                               Call createSlot
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call code
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call match
[      Urbi.Stack       ]         Call pattern
[      Urbi.Stack       ]         Call matchPattern
[      Urbi.Stack       ]           Call hasSlot
[      Urbi.Stack       ]           Call match
[      Urbi.Stack       ]             Call bindings
[      Urbi.Stack       ]             Call name
[      Urbi.Stack       ]             Call []=
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call isNil
[      Urbi.Stack       ]           Call nil
[      Urbi.Stack       ]           Call ===
[      Urbi.Stack       ]       Call bindings
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call Exception
[      Urbi.Stack       ]       Call FileNotFound
[      Urbi.Stack       ]       Call isA
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]     Call clog
[      Urbi.Stack       ]     Call maybeLoad
[      Urbi.Stack       ]       Call nil
[      Urbi.Stack       ]       Call searchFile
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\local.u
[     Libport.Path      ]         exists: false: E:\_Emys\URBI\EX_UTester - Copy\..\2.7.5\bin\..\share\gostai\local.u
[      Urbi.Error       ]         raise exception: FileNotFound
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call size
[      Urbi.Stack       ]                 Call +
[      Urbi.Stack       ]                 Call !=
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call 
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call +
[      Urbi.Stack       ]                     Call []
[      Urbi.Stack       ]                     Call setSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]                 Call updateSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call Pattern
[      Urbi.Stack       ]       Call Binding
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call setSlot
[      Urbi.Stack       ]             Call createSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call code
[      Urbi.Stack       ]                         Call Pattern
[      Urbi.Stack       ]                         Call Binding
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call setSlot
[      Urbi.Stack       ]                               Call createSlot
[      Urbi.Stack       ]                         Call new
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call clone
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call callMessage
[      Urbi.Stack       ]                             Call evalArgs
[      Urbi.Stack       ]                               Call args
[      Urbi.Stack       ]                               Call map
[      Urbi.Stack       ]                                 Call each|
[      Urbi.Stack       ]                                   Call each
[      Urbi.Stack       ]                                     Call f
[      Urbi.Stack       ]                                       Call eval
[      Urbi.Stack       ]                                         Call code
[      Urbi.Stack       ]                                         Call acceptVoid
[      Urbi.Stack       ]                                         Call updateSlot
[      Urbi.Stack       ]                                         Call getSlot
[      Urbi.Stack       ]                                         Call unacceptVoid
[      Urbi.Stack       ]                                     Call <<
[      Urbi.Stack       ]                             Call init
[      Urbi.Stack       ]                               Call updateSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]       Call match
[      Urbi.Stack       ]         Call pattern
[      Urbi.Stack       ]         Call matchPattern
[      Urbi.Stack       ]           Call hasSlot
[      Urbi.Stack       ]           Call match
[      Urbi.Stack       ]             Call bindings
[      Urbi.Stack       ]             Call name
[      Urbi.Stack       ]             Call []=
[      Urbi.Stack       ]               Call set
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]                 Call hash
[      Urbi.Stack       ]             Call true
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call isNil
[      Urbi.Stack       ]           Call nil
[      Urbi.Stack       ]           Call ===
[      Urbi.Stack       ]       Call bindings
[      Urbi.Stack       ]       Call []
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]         Call hash
[      Urbi.Stack       ]         Call ==
[      Urbi.Stack       ]       Call Exception
[      Urbi.Stack       ]       Call FileNotFound
[      Urbi.Stack       ]       Call isA
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: running
[         Sched         ] Considering Job(FastAsyncJobs) root job state: to_start in state to_start
[         Sched         ] Starting job Job(FastAsyncJobs) root job state: to_start
[         Sched         ] Job Job(FastAsyncJobs) root job state: to_start is starting
[    Sched.Coroutine    ] Start coroutine: 03C440F0.
[         Sched         ] job 03A9AE28: run
[     Urbi.UServer      ] Fast async jobs running 1
[     Urbi.UServer      ] Fast async jobs processing 0 operations
[     Urbi.UServer      ] Fast async job sleeping
[         Sched         ] Job(FastAsyncJobs) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ] Switch coroutine: 03C440F0 => 0027FC6C.
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 954
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (03D6A3F0).
[      Urbi.Shell       ]   shell: command: loadModule("UTester");
[      Urbi.Stack       ]   Call loadModule
[     Libport.Xltdl     ]     loading UTester
[     Libport.Xltdl     ]       try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\UTester, .la)
[     Libport.Xltdl     ]       try_dlopen (E:\_Emys\URBI\EX_UTester - Copy\UTester, .dll)
[     Libport.Xltdl     ]         tryall_dlopen (E:\_Emys\URBI\EX_UTester - Copy\UTester.dll, (ALL))
[     Libport.Xltdl     ]           lt_preopen->module_open (E:\_Emys\URBI\EX_UTester - Copy\UTester.dll)
[     Libport.Xltdl     ]             fail: file not found
[     Libport.Xltdl     ]           lt_loadlibrary->module_open (E:\_Emys\URBI\EX_UTester - Copy\UTester.dll)
[     Libport.Xltdl     ]         LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\UTester.dll)
[     Libport.Xltdl     ]       LoadLibrary (E:\_Emys\URBI\EX_UTester - Copy\UTester.dll): success
[     Libport.Xltdl     ]             success
[     Libport.Xltdl     ]     loading E:\_Emys\URBI\EX_UTester - Copy\UTester: pass
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: running
[         Sched         ] Considering Job(FastAsyncJobs) root job state: running in state running
[         Sched         ] will resume job Job(FastAsyncJobs) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C440F0.
[         Sched         ] job Job(FastAsyncJobs) root job state: running resumed
[         Sched         ] Job(FastAsyncJobs) root job state: waiting has not terminated (state: waiting)
[    Sched.Coroutine    ] Switch coroutine: 03C440F0 => 0027FC6C.
[         Sched         ] back from job Job(FastAsyncJobs) root job state: waiting (side-effect free)
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 955
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (03D74590).
[      Urbi.Shell       ]   shell: command: var t1 = UTester.new;
[      Urbi.Error       ]   raise lookup error: UTester
[      Urbi.Error       ]     raise exception: Lookup
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call fixSpelling
[      Urbi.Stack       ]             Call slotNames
[      Urbi.Stack       ]             Call closest
[      Urbi.Stack       ]               Call Tag
[      Urbi.Stack       ]               Call newFlowControl
[      Urbi.Stack       ]                 Call new
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call callMessage
[      Urbi.Stack       ]                     Call evalArgs
[      Urbi.Stack       ]                       Call args
[      Urbi.Stack       ]                       Call map
[      Urbi.Stack       ]                         Call each|
[      Urbi.Stack       ]                           Call each
[      Urbi.Stack       ]                             Call f
[      Urbi.Stack       ]                               Call eval
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call acceptVoid
[      Urbi.Stack       ]                                 Call updateSlot
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call unacceptVoid
[      Urbi.Stack       ]                             Call <<
[      Urbi.Stack       ]                     Call init
[      Urbi.Stack       ]               Call size
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call toLower
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]               Call <
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]   Call $show
[      Urbi.Stack       ]     Call isError
[      Urbi.Stack       ]     Call cerr
[      Urbi.Stack       ]     Call +
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]         Call location
[      Urbi.Stack       ]           Call hasLocalSlot
[      Urbi.Stack       ]           Call hideSystemFiles
[      Urbi.Stack       ]           Call !
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]           Call isVoid
[      Urbi.Stack       ]           Call !
[      Urbi.Stack       ]           Call System
[      Urbi.Stack       ]           Call systemFiles
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]           Call begin
[      Urbi.Stack       ]           Call file
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call hasNot
[      Urbi.Stack       ]             Call has
[      Urbi.Stack       ]               Call any
[      Urbi.Stack       ]                 Call Tag
[      Urbi.Stack       ]                 Call newFlowControl
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]             Call !
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]         Call acceptVoid
[      Urbi.Stack       ]         Call message
[      Urbi.Stack       ]           Call msg
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call Formatter
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call %
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]           Call suggested
[      Urbi.Stack       ]         Call slot
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call routine
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call %
[      Urbi.Stack       ]           Call Formatter
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call createSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call code
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call format
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]             Call format
[      Urbi.Stack       ]     Call <<
[      Urbi.Stack       ]       Call enabled
[      Urbi.Stack       ]       Call quote
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]       Call lobby
[      Urbi.Stack       ]         Call Lobby
[      Urbi.Stack       ]         Call lobby
[      Urbi.Stack       ]       Call name
[      Urbi.Stack       ]       Call send
[      Urbi.Stack       ]     Call backtrace
[      Urbi.Stack       ]       Call $backtrace
[      Urbi.Stack       ]       Call isVoid
[      Urbi.Stack       ]       Call hideSystemFiles
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]       Call $backtrace
[      Urbi.Stack       ]       Call filter
[      Urbi.Stack       ]         Call each|
[      Urbi.Stack       ]     Call size
[      Urbi.Stack       ]     Call !=
[      Urbi.Stack       ]     Call each|
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: running
[         Sched         ] Considering Job(FastAsyncJobs) root job state: waiting in state waiting
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 956
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[      Urbi.Shell       ] shell: executing command (03D6A450).
[      Urbi.Shell       ]   shell: command: t1.add(2);
[      Urbi.Error       ]   raise lookup error: t1
[      Urbi.Error       ]     raise exception: Lookup
[      Urbi.Stack       ]       Call new
[      Urbi.Stack       ]         Call getSlot
[      Urbi.Stack       ]         Call clone
[      Urbi.Stack       ]         Call updateSlot
[      Urbi.Stack       ]         Call callMessage
[      Urbi.Stack       ]           Call evalArgs
[      Urbi.Stack       ]             Call args
[      Urbi.Stack       ]             Call map
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call f
[      Urbi.Stack       ]                     Call eval
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call acceptVoid
[      Urbi.Stack       ]                       Call updateSlot
[      Urbi.Stack       ]                       Call getSlot
[      Urbi.Stack       ]                       Call unacceptVoid
[      Urbi.Stack       ]                   Call <<
[      Urbi.Stack       ]           Call init
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call fixSpelling
[      Urbi.Stack       ]             Call slotNames
[      Urbi.Stack       ]             Call closest
[      Urbi.Stack       ]               Call Tag
[      Urbi.Stack       ]               Call newFlowControl
[      Urbi.Stack       ]                 Call new
[      Urbi.Stack       ]                   Call getSlot
[      Urbi.Stack       ]                   Call clone
[      Urbi.Stack       ]                   Call updateSlot
[      Urbi.Stack       ]                   Call callMessage
[      Urbi.Stack       ]                     Call evalArgs
[      Urbi.Stack       ]                       Call args
[      Urbi.Stack       ]                       Call map
[      Urbi.Stack       ]                         Call each|
[      Urbi.Stack       ]                           Call each
[      Urbi.Stack       ]                             Call f
[      Urbi.Stack       ]                               Call eval
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call acceptVoid
[      Urbi.Stack       ]                                 Call updateSlot
[      Urbi.Stack       ]                                 Call getSlot
[      Urbi.Stack       ]                                 Call unacceptVoid
[      Urbi.Stack       ]                             Call <<
[      Urbi.Stack       ]                     Call init
[      Urbi.Stack       ]               Call size
[      Urbi.Stack       ]               Call ==
[      Urbi.Stack       ]               Call toLower
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]               Call each|
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                   Call ==
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]                 Call each
[      Urbi.Stack       ]                   Call toLower
[      Urbi.Stack       ]                   Call distance
[      Urbi.Stack       ]                   Call <
[      Urbi.Stack       ]               Call <
[      Urbi.Stack       ]               Call size
[      Urbi.Stack       ]               Call <
[      Urbi.Stack       ]               Call size
[      Urbi.Stack       ]               Call <
[      Urbi.Stack       ]               Call distance
[      Urbi.Stack       ]               Call <
[      Urbi.Stack       ]               Call nil
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]   Call $show
[      Urbi.Stack       ]     Call isError
[      Urbi.Stack       ]     Call cerr
[      Urbi.Stack       ]     Call +
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]         Call location
[      Urbi.Stack       ]           Call hasLocalSlot
[      Urbi.Stack       ]           Call hideSystemFiles
[      Urbi.Stack       ]           Call !
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]           Call isVoid
[      Urbi.Stack       ]           Call !
[      Urbi.Stack       ]           Call System
[      Urbi.Stack       ]           Call systemFiles
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]           Call begin
[      Urbi.Stack       ]           Call file
[      Urbi.Stack       ]           Call asString
[      Urbi.Stack       ]           Call hasNot
[      Urbi.Stack       ]             Call has
[      Urbi.Stack       ]               Call any
[      Urbi.Stack       ]                 Call Tag
[      Urbi.Stack       ]                 Call newFlowControl
[      Urbi.Stack       ]                   Call new
[      Urbi.Stack       ]                     Call getSlot
[      Urbi.Stack       ]                     Call clone
[      Urbi.Stack       ]                     Call updateSlot
[      Urbi.Stack       ]                     Call callMessage
[      Urbi.Stack       ]                       Call evalArgs
[      Urbi.Stack       ]                         Call args
[      Urbi.Stack       ]                         Call map
[      Urbi.Stack       ]                           Call each|
[      Urbi.Stack       ]                             Call each
[      Urbi.Stack       ]                               Call f
[      Urbi.Stack       ]                                 Call eval
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call acceptVoid
[      Urbi.Stack       ]                                   Call updateSlot
[      Urbi.Stack       ]                                   Call getSlot
[      Urbi.Stack       ]                                   Call unacceptVoid
[      Urbi.Stack       ]                               Call <<
[      Urbi.Stack       ]                       Call init
[      Urbi.Stack       ]                 Call each|
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                   Call each
[      Urbi.Stack       ]                     Call f
[      Urbi.Stack       ]                       Call ==
[      Urbi.Stack       ]                 Call false
[      Urbi.Stack       ]             Call !
[      Urbi.Stack       ]           Call $location
[      Urbi.Stack       ]         Call acceptVoid
[      Urbi.Stack       ]         Call message
[      Urbi.Stack       ]           Call msg
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call Formatter
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]                   Call setSlot
[      Urbi.Stack       ]                   Call createSlot
[      Urbi.Stack       ]             Call new
[      Urbi.Stack       ]               Call getSlot
[      Urbi.Stack       ]               Call clone
[      Urbi.Stack       ]               Call updateSlot
[      Urbi.Stack       ]               Call callMessage
[      Urbi.Stack       ]                 Call evalArgs
[      Urbi.Stack       ]                   Call args
[      Urbi.Stack       ]                   Call map
[      Urbi.Stack       ]                     Call each|
[      Urbi.Stack       ]                       Call each
[      Urbi.Stack       ]                         Call f
[      Urbi.Stack       ]                           Call eval
[      Urbi.Stack       ]                             Call code
[      Urbi.Stack       ]                             Call acceptVoid
[      Urbi.Stack       ]                             Call updateSlot
[      Urbi.Stack       ]                             Call getSlot
[      Urbi.Stack       ]                             Call unacceptVoid
[      Urbi.Stack       ]                         Call <<
[      Urbi.Stack       ]                 Call init
[      Urbi.Stack       ]             Call %
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]           Call suggested
[      Urbi.Stack       ]         Call slot
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call routine
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call isVoid
[      Urbi.Stack       ]         Call !
[      Urbi.Stack       ]         Call %
[      Urbi.Stack       ]           Call Formatter
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]                 Call setSlot
[      Urbi.Stack       ]                 Call createSlot
[      Urbi.Stack       ]           Call new
[      Urbi.Stack       ]             Call getSlot
[      Urbi.Stack       ]             Call clone
[      Urbi.Stack       ]             Call updateSlot
[      Urbi.Stack       ]             Call callMessage
[      Urbi.Stack       ]               Call evalArgs
[      Urbi.Stack       ]                 Call args
[      Urbi.Stack       ]                 Call map
[      Urbi.Stack       ]                   Call each|
[      Urbi.Stack       ]                     Call each
[      Urbi.Stack       ]                       Call f
[      Urbi.Stack       ]                         Call eval
[      Urbi.Stack       ]                           Call code
[      Urbi.Stack       ]                           Call acceptVoid
[      Urbi.Stack       ]                           Call updateSlot
[      Urbi.Stack       ]                           Call getSlot
[      Urbi.Stack       ]                           Call unacceptVoid
[      Urbi.Stack       ]                       Call <<
[      Urbi.Stack       ]               Call init
[      Urbi.Stack       ]           Call %
[      Urbi.Stack       ]             Call format
[      Urbi.Stack       ]               Call asString
[      Urbi.Stack       ]               Call format
[      Urbi.Stack       ]             Call format
[      Urbi.Stack       ]     Call <<
[      Urbi.Stack       ]       Call enabled
[      Urbi.Stack       ]       Call quote
[      Urbi.Stack       ]       Call asString
[      Urbi.Stack       ]       Call isNil
[      Urbi.Stack       ]         Call nil
[      Urbi.Stack       ]         Call ===
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]       Call lobby
[      Urbi.Stack       ]         Call Lobby
[      Urbi.Stack       ]         Call lobby
[      Urbi.Stack       ]       Call name
[      Urbi.Stack       ]       Call send
[      Urbi.Stack       ]     Call backtrace
[      Urbi.Stack       ]       Call $backtrace
[      Urbi.Stack       ]       Call isVoid
[      Urbi.Stack       ]       Call hideSystemFiles
[      Urbi.Stack       ]       Call !
[      Urbi.Stack       ]       Call $backtrace
[      Urbi.Stack       ]       Call filter
[      Urbi.Stack       ]         Call each|
[      Urbi.Stack       ]     Call size
[      Urbi.Stack       ]     Call !=
[      Urbi.Stack       ]     Call each|
[         Sched         ]   Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: running
[         Sched         ] Considering Job(FastAsyncJobs) root job state: waiting in state waiting
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 957
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]   job Job(shell) root job state: running resumed
[      Urbi.Shell       ] shell: reading command.
[     Urbi.Scanner      ]   LexerInput (max size = 8192)
[   Urbi.StreamBuffer   ]     requesting new data.
[   Urbi.StreamBuffer   ]       no data, going to sleep: 006B2E98.
[         Sched         ]       Job(shell) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: running
[         Sched         ] Considering Job(FastAsyncJobs) root job state: waiting in state waiting
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 958
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: running in state running
[         Sched         ] will resume job Job(shell) root job state: running
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 006AD070.
[         Sched         ]       job Job(shell) root job state: running resumed
[         Sched         ]       Job(shell) root job state: waiting has not terminated (state: waiting)
[    Sched.Coroutine    ]       Switch coroutine: 006AD070 => 0027FC6C.
[         Sched         ] back from job Job(shell) root job state: waiting (side-effect free)
[         Sched         ] Considering Job(FastAsyncJobs) root job state: waiting in state waiting
[         Sched         ] Scheduler asking to be woken up ASAP
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 0
[         Sched         ]   Job(pollLoop) root job state: running has not terminated (state: running)
[    Sched.Coroutine    ]   Switch coroutine: 03C432F0 => 0027FC6C.
[         Urbi          ] next_time: 0 (is exit: 0)
[         Sched         ] ======================================================== cycle 959
[         Sched         ] 2 jobs in the queue for this round
[         Sched         ] Considering Job(shell) root job state: waiting in state waiting
[         Sched         ] Considering Job(FastAsyncJobs) root job state: waiting in state waiting
[         Sched         ] Scheduler asking to be woken up in 3599s
[    Sched.Coroutine    ] Switch coroutine: 0027FC6C => 03C432F0.
[         Sched         ]   job Job(pollLoop) root job state: running resumed
[         Urbi          ]   Poll task will poll for 3599999717
[         Urbi          ] Execution times (seconds)
[         Urbi          ]  bind                    : 0      (    0%)   0      (    0%)   0.362207 (0.349%) 
[         Urbi          ]  flow                    : 0      (    0%)   0      (    0%)   0.052954 (0.051%) 
[         Urbi          ]  parse                   : 0      (    0%)   0      (    0%)   25.6756 ( 24.7%) 
[         Urbi          ]  server                  : 0      (    0%)   0      (    0%)   77.7129 ( 74.9%) 
[         Urbi          ] 
[         Urbi          ] Cumulated times (seconds)
[         Urbi          ]  bind                    : 0      (    0%)   0      (    0%)   2.16425 ( 2.08%) 
[         Urbi          ]  flow                    : 0      (    0%)   0      (    0%)   2.16445 ( 2.09%) 
[         Urbi          ]  parse                   : 0      (    0%)   0      (    0%)   103.794 (  100%) 
[         Urbi          ]  server                  : 0      (    0%)   0      (    0%)   103.805 (  100%) 
[         Urbi          ] 
[         Urbi          ]  TOTAL (seconds)         : 0      user,      0      system,    104    wall
[         Urbi          ] 
